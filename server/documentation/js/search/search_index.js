var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.084,1,2.023]],["body/classes/AllExceptionsFilter.html",[0,0.069,1,2.397,2,1.49,3,0.261,4,0.226,5,0.226,6,3.657,7,2.157,8,2.397,9,4.39,10,0.419,11,1.055,12,4.808,13,1.62,14,2.589,15,5.315,16,0.809,17,2.589,18,1.149,19,0.033,20,1.149,21,0.886,22,1.055,23,3.74,24,4.39,25,4.808,26,2.589,27,4.808,28,0.73,29,3.115,30,0.377,31,4.808,32,4.808,33,0.336,34,1.659,35,0.261,36,1.227,37,2.157,38,1.227,39,2.589,40,2.589,41,3.74,42,2.589,43,3.74,44,2.589,45,2.589,46,2.157,47,2.302,48,2.589,49,2.589,50,2.589,51,4.39,52,2.589,53,2.589,54,4.39,55,2.589,56,2.589,57,2.157,58,2.589,59,4.39,60,2.589,61,3.74,62,2.589,63,2.589,64,1.227,65,2.589,66,2.589,67,2.589,68,2.589,69,2.589,70,0.019,71,0.019]],["title/controllers/AppController.html",[72,1.497,73,2.023]],["body/controllers/AppController.html",[0,0.104,3,0.393,4,0.34,5,0.34,10,0.631,11,1.392,16,0.843,19,0.033,28,1.099,30,0.498,33,0.506,35,0.393,36,1.847,37,3.246,70,0.025,71,0.025,72,2.34,73,3.164,74,1.847,75,3.246,76,4.745,77,2.029,78,3.896,79,1.797,80,2.822,81,3.246,82,1.303,83,3.896]],["title/modules/AppModule.html",[84,1.149,85,2.023]],["body/modules/AppModule.html",[0,0.074,1,2.536,3,0.283,4,0.244,5,0.244,19,0.033,30,0.588,33,0.364,34,1.796,35,0.283,70,0.02,71,0.02,73,2.94,74,1.876,80,2.842,81,2.334,84,1.67,85,3.864,86,1.328,87,1.328,88,1.612,89,1.612,90,1.328,91,2.64,92,1.612,93,2.334,94,2.334,95,2.334,96,2.842,97,3.14,98,2.842,99,2.277,100,1.612,101,1.612,102,2.802,103,3.296,104,2.802,105,2.802,106,2.026,107,2.802,108,2.802,109,2.802,110,3.957,111,2.802,112,2.802,113,2.802,114,2.802,115,2.026,116,2.802,117,2.802]],["title/injectables/AppService.html",[80,1.644,118,0.275]],["body/injectables/AppService.html",[0,0.109,3,0.415,4,0.359,5,0.359,10,0.665,11,1.44,16,0.89,19,0.032,28,1.159,30,0.415,33,0.534,35,0.415,70,0.026,71,0.026,76,4.838,79,1.859,80,2.659,82,1.375,118,0.446,119,1.263,120,3.425,121,4.111,122,4.111,123,4.111]],["title/controllers/AuthController.html",[72,1.497,124,2.023]],["body/controllers/AuthController.html",[0,0.066,3,0.252,4,0.218,5,0.218,10,0.404,11,1.026,16,1.023,18,1.451,19,0.033,20,1.451,21,0.591,22,1.333,28,1.333,29,2.078,30,0.547,33,0.324,35,0.252,36,1.182,38,1.182,64,1.182,70,0.019,71,0.019,72,1.182,74,1.182,77,2.461,82,1.437,124,2.333,125,2.078,126,2.078,127,2.494,128,3.032,129,3.032,130,3.032,131,1.706,132,3.032,133,2.494,134,2.494,135,2.494,136,3.794,137,2.494,138,2.494,139,2.494,140,2.494,141,2.494,142,2.494,143,2.078,144,2.719,145,3.64,146,2.494,147,2.333,148,2.078,149,2.494,150,1.435,151,2.078,152,2.078,153,1.599,154,2.038,155,1.803,156,1.599,157,2.494,158,3.032,159,1.435,160,2.494,161,1.435,162,3.64,163,1.599,164,2.494,165,2.494,166,2.494,167,2.078,168,2.494,169,2.078,170,2.494,171,2.494,172,2.494,173,2.494,174,2.494,175,2.494,176,2.494,177,2.494,178,2.494,179,2.494,180,2.494,181,2.494]],["title/modules/AuthModule.html",[84,1.149,96,1.644]],["body/modules/AuthModule.html",[0,0.071,3,0.271,4,0.234,5,0.234,19,0.033,30,0.59,33,0.349,35,0.271,70,0.02,71,0.02,74,1.819,84,1.631,86,1.272,87,1.272,88,1.543,89,1.543,90,1.272,91,2.577,92,1.543,96,3.204,98,2.802,99,2.207,100,1.543,101,1.543,103,3.196,124,2.871,154,2.55,155,1.94,182,2.234,183,2.234,184,2.682,185,2.802,186,3.095,187,3.095,188,3.095,189,2.682,190,2.682,191,2.234,192,2.682,193,3.836,194,1.162,195,2.682,196,2.682,197,1.94,198,3.836,199,2.682,200,2.682,201,2.682]],["title/injectables/AuthService.html",[118,0.275,154,1.497]],["body/injectables/AuthService.html",[0,0.038,3,0.143,4,0.123,5,0.123,10,0.229,11,0.659,13,1.012,16,0.991,18,1.406,19,0.033,20,1.406,21,1.084,22,1.291,28,1.235,30,0.462,33,0.184,35,0.143,38,1.644,47,2.119,64,1.107,70,0.012,71,0.012,79,2.079,82,1.464,106,1.022,118,0.204,119,0.434,128,1.946,129,1.946,130,1.946,131,2.266,132,1.946,143,1.946,144,1.995,147,1.497,152,1.177,153,0.906,154,1.107,185,2.28,191,1.177,197,1.022,202,1.177,203,2.335,204,2.335,205,2.335,206,1.177,207,1.644,208,2.075,209,4.378,210,4.378,211,1.413,212,1.946,213,2.335,214,1.413,215,2.731,216,2.335,217,1.413,218,2.335,219,1.413,220,2.21,221,2.335,222,3.135,223,1.413,224,1.413,225,2.223,226,2.335,227,1.413,228,2.335,229,2.223,230,1.413,231,1.413,232,1.177,233,1.413,234,0.67,235,3.84,236,2.335,237,2.719,238,1.413,239,1.413,240,1.022,241,2.335,242,1.413,243,1.413,244,2.335,245,3.468,246,2.335,247,1.413,248,2.335,249,2.335,250,2.159,251,1.413,252,1.413,253,1.413,254,0.67,255,1.177,256,2.335,257,1.413,258,2.335,259,2.335,260,1.413,261,2.335,262,1.413,263,1.413,264,1.413,265,2.335,266,1.413,267,1.022,268,2.335,269,1.689,270,2.335,271,2.335,272,2.335,273,1.413,274,1.413]],["title/classes/CreateUserDto.html",[0,0.084,144,1.816]],["body/classes/CreateUserDto.html",[0,0.102,2,1.538,3,0.27,4,0.233,5,0.233,10,0.433,16,1.163,19,0.032,21,1.273,30,0.386,35,0.27,70,0.02,71,0.02,77,2.69,79,2.128,144,2.202,220,2.572,229,2.865,234,1.267,254,2.547,275,4.609,276,1.933,277,2.202,278,3.232,279,3.232,280,3.232,281,2.673,282,2.673,283,3.827,284,2.673,285,2.673,286,2.673,287,2.673,288,2.673,289,3.827,290,3.827,291,4.609,292,3.827,293,3.827,294,3.827,295,2.673,296,2.673,297,2.673,298,3.827,299,5.373,300,3.724,301,3.827,302,2.227,303,3.188,304,1.933,305,3.188,306,2.673,307,2.227,308,2.227]],["title/injectables/HashService.html",[118,0.275,185,1.644]],["body/injectables/HashService.html",[0,0.066,3,0.252,4,0.218,5,0.218,10,0.404,11,1.026,16,0.788,18,1.118,19,0.033,20,1.118,21,0.862,22,1.026,28,1.333,30,0.367,33,0.324,35,0.252,47,1.08,70,0.019,71,0.019,79,2.168,82,1.217,84,0.908,96,1.299,118,0.318,119,0.766,131,2.082,185,1.896,225,3.029,237,1.299,240,4.161,309,2.078,310,2.333,311,3.64,312,3.64,313,3.417,314,4.725,315,5.247,316,3.64,317,3.64,318,3.64,319,3.936,320,3.64,321,3.64,322,3.64,323,2.494,324,3.64,325,3.64,326,3.64,327,3.64,328,3.64,329,3.64,330,3.64,331,5.025,332,2.494,333,3.58,334,3.64,335,2.494,336,2.494,337,2.494]],["title/injectables/JwtAccessStrategy.html",[118,0.275,186,1.816]],["body/injectables/JwtAccessStrategy.html",[0,0.091,3,0.345,4,0.299,5,0.299,10,0.554,11,1.28,13,2.206,16,0.982,18,1.051,19,0.033,20,1.051,21,0.811,22,0.965,28,0.965,30,0.514,33,0.445,35,0.345,38,1.623,70,0.023,71,0.023,82,1.145,118,0.396,119,1.051,131,2.021,186,2.612,194,1.483,250,3.282,338,3.682,339,2.852,340,3.282,341,3.423,342,4.539,343,3.423,344,2.475,345,2.852,346,2.475,347,2.194,348,2.909,349,1.623,350,2.475,351,2.475,352,2.852,353,2.852,354,2.852,355,2.852,356,2.852,357,3.423]],["title/injectables/JwtAuthGuard.html",[118,0.275,161,1.816]],["body/injectables/JwtAuthGuard.html",[0,0.116,3,0.439,4,0.38,5,0.38,19,0.032,30,0.533,33,0.566,35,0.439,70,0.027,71,0.027,118,0.461,119,1.337,161,3.042,194,1.885,349,2.063,358,2.79,359,3.147,360,3.147,361,3.626]],["title/injectables/JwtRefreshGuard.html",[118,0.275,163,2.023]],["body/injectables/JwtRefreshGuard.html",[0,0.101,3,0.384,4,0.332,5,0.332,19,0.032,30,0.491,33,0.495,35,0.384,70,0.025,71,0.025,118,0.424,119,1.169,150,2.798,163,3.117,194,1.648,310,2.439,313,3.516,348,3.117,349,1.804,358,2.439,360,2.752,361,3.17,362,3.17,363,2.798,364,5.647,365,4.862,366,4.862,367,4.862,368,4.464,369,4.862]],["title/injectables/JwtRefreshStrategy.html",[118,0.275,187,1.816]],["body/injectables/JwtRefreshStrategy.html",[0,0.086,3,0.325,4,0.281,5,0.281,10,0.521,11,1.229,13,2.139,16,0.943,18,0.989,19,0.033,20,0.989,21,0.763,22,0.908,28,0.908,30,0.498,33,0.419,35,0.325,38,1.527,47,1.395,70,0.022,71,0.022,82,1.077,115,2.329,118,0.38,119,0.989,131,1.96,136,3.151,150,1.853,187,2.507,194,1.395,222,2.793,250,3.826,338,3.571,340,3.151,344,2.329,345,2.683,346,2.329,347,2.065,348,2.793,349,1.527,350,2.329,351,2.329,352,2.683,353,2.683,354,2.683,355,2.683,356,2.683,368,2.683,370,2.683,371,3.221,372,3.221,373,3.221,374,3.221,375,3.221,376,3.221,377,3.221,378,3.221]],["title/injectables/LocalAuthGuard.html",[118,0.275,156,2.023]],["body/injectables/LocalAuthGuard.html",[0,0.116,3,0.439,4,0.38,5,0.38,19,0.032,30,0.533,33,0.566,35,0.439,70,0.027,71,0.027,118,0.461,119,1.337,156,3.389,194,1.885,349,2.063,359,3.147,360,3.147,379,3.626,380,4.352]],["title/injectables/LocalStrategy.html",[118,0.275,188,1.816]],["body/injectables/LocalStrategy.html",[0,0.081,3,0.308,4,0.266,5,0.266,10,0.494,11,1.185,13,1.322,16,0.909,18,1.29,19,0.033,20,1.29,21,0.995,22,1.185,28,0.861,30,0.522,33,0.397,35,0.308,36,1.447,47,1.322,64,1.447,70,0.022,71,0.022,79,2.041,82,1.021,118,0.367,119,0.938,131,1.906,154,2.658,155,2.207,188,2.417,194,1.322,215,2.417,220,2.417,225,2.693,229,3.316,237,1.59,267,2.207,269,2.207,340,3.038,344,2.207,346,2.207,347,1.957,349,1.447,350,2.207,351,2.207,381,2.543,382,3.053,383,3.053,384,4.201,385,3.053,386,4.201,387,2.543,388,3.053,389,3.053]],["title/modules/PrismaModule.html",[84,1.149,97,1.816]],["body/modules/PrismaModule.html",[0,0.097,3,0.368,4,0.319,5,0.319,19,0.032,30,0.478,33,0.475,35,0.368,70,0.024,71,0.024,84,1.914,86,1.732,87,1.732,88,2.102,89,2.102,90,1.732,91,3.024,92,3.024,97,3.458,99,2.725,100,2.102,101,2.102,207,2.982,390,3.043,391,3.043,392,3.043,393,3.652,394,4.736,395,3.652]],["title/injectables/PrismaService.html",[118,0.275,207,1.497]],["body/injectables/PrismaService.html",[0,0.09,3,0.342,4,0.296,5,0.296,8,2.176,10,0.549,11,1.273,16,0.977,18,1.043,19,0.033,20,1.043,21,0.804,22,0.957,28,1.273,30,0.455,33,0.441,35,0.342,70,0.023,71,0.023,118,0.394,119,1.043,131,2.343,207,2.14,234,1.609,237,2.351,349,2.14,396,2.828,397,5.071,398,4.514,399,5.785,400,4.514,401,5.404,402,3.395,403,2.828,404,3.395,405,3.395,406,3.395,407,3.395]],["title/guards/RolesGuard.html",[363,1.816,408,2.023]],["body/guards/RolesGuard.html",[0,0.076,3,0.287,4,0.248,5,0.248,8,1.821,10,0.46,11,1.127,13,1.23,16,0.865,18,1.227,19,0.033,20,1.227,21,0.946,22,1.127,28,0.801,30,0.403,33,0.369,34,1.821,35,0.287,36,1.347,47,2.002,70,0.021,71,0.021,82,1.336,115,2.054,118,0.349,150,2.299,215,1.635,254,2.191,255,2.366,313,3.821,363,2.299,408,2.561,409,2.84,410,2.366,411,5.015,412,2.84,413,5.481,414,2.84,415,3.995,416,5.015,417,2.84,418,2.84,419,3.995,420,3.995,421,4.622,422,4.622,423,2.84,424,2.84,425,3.995,426,2.84,427,2.84,428,2.84,429,3.995,430,2.84,431,3.995,432,3.995,433,2.84,434,2.84,435,2.84,436,2.84,437,2.84,438,2.84,439,2.84]],["title/classes/UpdateUserDto.html",[0,0.084,440,1.816]],["body/classes/UpdateUserDto.html",[0,0.108,2,1.681,3,0.295,4,0.255,5,0.255,10,0.473,16,1.156,19,0.032,21,1.265,22,1.68,30,0.411,35,0.295,70,0.021,71,0.021,77,2.781,79,2.108,222,3.008,234,1.385,254,2.622,276,2.113,277,2.345,278,3.393,279,3.393,280,3.393,300,4.23,302,2.434,303,2.434,304,2.113,305,3.395,307,2.434,308,2.434,440,2.345,441,4.607,442,4.075,443,2.922,444,2.922,445,2.922,446,2.922,447,2.922,448,2.922,449,5.675,450,2.922]],["title/classes/UserEntity.html",[0,0.084,159,1.816]],["body/classes/UserEntity.html",[0,0.101,2,1.518,3,0.266,4,0.23,5,0.23,8,2.43,10,0.427,13,1.143,16,1.277,18,0.811,19,0.032,20,0.811,21,1.398,22,0.744,30,0.383,35,0.266,70,0.02,71,0.02,77,1.975,79,2.171,159,2.182,215,2.554,220,2.554,222,2.845,229,2.845,234,1.251,254,2.536,277,2.182,278,3.209,279,3.209,280,3.209,451,2.198,452,4.438,453,4.438,454,4.438,455,3.792,456,5.138,457,2.639,458,4.851,459,2.639,460,2.639,461,2.639,462,3.792,463,2.639,464,2.639,465,2.639,466,5.138,467,2.639,468,2.639,469,2.639,470,2.639,471,2.198,472,2.639]],["title/controllers/UsersController.html",[72,1.497,473,2.023]],["body/controllers/UsersController.html",[0,0.059,3,0.225,4,0.195,5,0.195,10,0.362,11,0.946,16,0.969,18,1.238,19,0.033,20,1.238,21,0.529,22,1.136,28,1.263,30,0.543,33,0.29,35,0.225,36,1.06,38,2.124,47,0.968,64,2.124,70,0.017,71,0.017,72,1.06,74,1.06,77,2.333,82,1.498,126,1.862,131,2.288,136,3.781,147,2.583,148,2.796,150,2.319,151,1.862,153,1.433,158,1.862,159,1.286,161,1.286,167,3.357,169,3.999,208,1.91,234,1.06,237,1.164,254,1.06,333,1.862,358,1.433,408,2.151,440,2.577,473,2.151,474,1.862,475,2.796,476,3.731,477,3.356,478,3.357,479,3.357,480,2.235,481,2.235,482,2.235,483,2.235,484,2.235,485,2.235,486,2.235,487,2.235,488,2.235,489,2.235,490,2.235,491,2.235,492,2.235,493,2.235,494,2.235,495,1.862,496,1.862,497,1.616,498,2.235,499,2.235,500,2.235,501,2.235,502,2.235,503,2.235,504,2.235,505,2.235,506,2.235,507,2.235,508,2.235,509,2.235,510,2.235,511,2.235,512,2.235]],["title/modules/UsersModule.html",[84,1.149,98,1.644]],["body/modules/UsersModule.html",[0,0.094,3,0.357,4,0.309,5,0.309,19,0.032,30,0.522,33,0.46,35,0.357,70,0.024,71,0.024,74,2.201,84,1.885,86,1.679,87,1.679,88,2.038,89,2.038,90,1.679,91,2.979,92,2.979,98,3.107,99,2.671,100,2.038,101,2.038,208,2.969,473,3.319,495,2.95,513,2.95,514,2.95,515,2.95,516,3.542,517,3.542]],["title/injectables/UsersService.html",[118,0.275,208,1.497]],["body/injectables/UsersService.html",[0,0.06,3,0.229,4,0.198,5,0.198,10,0.367,11,0.956,13,0.982,16,1.045,18,1.385,19,0.033,20,1.385,21,1.068,22,1.272,28,1.272,30,0.41,33,0.294,35,0.229,36,1.074,38,1.607,47,1.954,64,1.607,70,0.017,71,0.017,79,2.011,82,1.508,118,0.296,119,0.696,131,2.295,147,2.891,153,1.452,206,1.888,207,2.138,208,1.607,212,2.825,215,1.951,220,3.178,225,2.891,232,1.888,237,2.349,240,1.639,267,1.639,269,2.452,440,2.595,475,2.825,476,3.757,478,2.825,479,2.825,496,1.888,518,1.888,519,3.391,520,2.266,521,2.266,522,3.391,523,2.266,524,3.391,525,2.266,526,3.391,527,2.266,528,2.266,529,2.266,530,2.266,531,3.391,532,3.391,533,3.391,534,2.266,535,3.391,536,2.266,537,2.266]],["title/coverage.html",[538,3.108]],["body/coverage.html",[0,0.13,1,1.708,5,0.233,6,2.22,7,2.22,19,0.032,21,0.631,64,1.263,70,0.02,71,0.02,72,2.115,73,1.708,75,2.22,80,1.388,90,1.263,118,0.516,120,2.22,124,1.708,125,2.22,144,1.533,154,1.263,156,1.708,159,1.533,161,1.533,163,1.708,185,1.388,186,1.533,187,1.533,188,1.533,202,2.22,207,1.263,208,1.263,275,2.22,276,2.761,309,2.22,338,2.761,339,2.22,358,2.447,359,2.761,362,2.22,363,1.533,370,2.22,379,2.22,381,2.22,396,2.22,408,1.708,410,2.22,440,1.533,441,2.22,451,2.22,473,1.708,474,2.22,497,1.927,518,2.22,538,1.927,539,2.665,540,2.665,541,2.665,542,6.232,543,3.818,544,3.818,545,2.665,546,2.22,547,2.665,548,4.873,549,2.665,550,2.665,551,2.665,552,5.367,553,2.665,554,2.665,555,2.22,556,2.665,557,3.818,558,2.665,559,2.665,560,2.665]],["title/dependencies.html",[87,1.799,561,2.2]],["body/dependencies.html",[0,0.129,19,0.033,33,0.492,34,2.428,70,0.025,71,0.025,87,1.796,106,2.739,194,1.641,197,2.739,234,1.796,304,2.739,319,3.155,347,3.427,348,2.428,387,3.155,471,3.155,562,5.347,563,3.788,564,3.788,565,3.788,566,3.788,567,3.788,568,3.788,569,3.788,570,3.788,571,3.788,572,3.788,573,3.788,574,3.788,575,3.788,576,3.788,577,3.788,578,3.788,579,3.788]],["title/miscellaneous/functions.html",[580,1.693,581,3.161]],["body/miscellaneous/functions.html",[10,0.77,19,0.029,70,0.029,71,0.029,90,2.804,555,3.963,580,3.049,581,3.963,582,4.757]],["title/index.html",[10,0.427,583,2.641,584,2.641]],["body/index.html",[4,0.279,19,0.032,46,2.662,57,2.662,70,0.022,71,0.022,310,2.048,403,2.662,538,2.311,585,3.196,586,3.196,587,4.334,588,3.196,589,3.196,590,3.196,591,3.196,592,3.196,593,4.918,594,3.196,595,3.196,596,3.196,597,3.196,598,5.813,599,3.196,600,3.196,601,5.684,602,3.196,603,3.196,604,4.334,605,3.196,606,3.196,607,3.196,608,3.196,609,4.334,610,4.334,611,3.196,612,3.196,613,3.196,614,4.334,615,4.334,616,3.196,617,3.196,618,3.196,619,3.196,620,3.196,621,2.662,622,3.196,623,3.196,624,3.196,625,3.196,626,3.196,627,3.196,628,3.196,629,3.196,630,3.196,631,2.662,632,3.196,633,3.196,634,3.196,635,3.196,636,3.196,637,3.196,638,2.662]],["title/modules.html",[86,2.038]],["body/modules.html",[19,0.027,70,0.027,71,0.027,85,2.835,86,2.097,96,2.304,97,2.545,98,2.304,621,4.961,639,5.955,640,5.955,641,5.955]],["title/overview.html",[642,3.581]],["body/overview.html",[2,1.675,19,0.032,70,0.021,71,0.021,74,1.38,80,2.439,84,1.06,85,3.815,86,1.38,87,1.38,88,1.675,89,1.675,90,1.38,91,1.675,92,1.675,93,2.425,94,2.425,95,2.425,96,3.224,97,3.179,98,2.953,99,2.339,100,1.675,101,1.675,119,0.894,154,2.22,182,2.425,183,2.425,185,2.439,186,2.695,187,2.695,188,2.695,207,2.688,208,2.688,291,2.425,363,1.675,390,2.425,391,2.425,392,2.425,513,2.425,514,2.425,515,2.425,642,2.425,643,4.065,644,2.911,645,2.911]],["title/properties.html",[277,2.183,561,2.2]],["body/properties.html",[19,0.032,70,0.028,71,0.028,277,2.69,310,2.997,631,3.895,638,3.895,646,4.676,647,4.676,648,4.676]],["title/miscellaneous/variables.html",[580,1.693,649,3.161]],["body/miscellaneous/variables.html",[10,0.74,19,0.031,70,0.028,71,0.028,79,1.664,254,2.581,497,3.938,546,3.808,580,2.93,649,3.808,650,4.571,651,4.571,652,4.571,653,4.571]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":542,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":647,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":543,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":544,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":549,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":545,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["1.0.0",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":550,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":645,"title":{},"body":{"overview.html":{}}}],["15m",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["1})@maxlength(16",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["2/3",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":644,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":643,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["4.16.2",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["8",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9.0.0",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["acceso",{"_index":432,"title":{},"body":{"guards/RolesGuard.html":{}}}],["access.strategy",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["access.strategy.ts",{"_index":339,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"coverage.html":{}}}],["access.strategy.ts:17",{"_index":343,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["access.strategy.ts:8",{"_index":341,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["accesstoken",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["al",{"_index":437,"title":{},"body":{"guards/RolesGuard.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["amazing",{"_index":622,"title":{},"body":{"index.html":{}}}],["app",{"_index":403,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":407,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":73,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":592,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":85,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":80,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["async",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":359,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":124,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":360,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":361,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('local",{"_index":380,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":96,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/HashService.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":631,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":154,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["await",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":623,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":528,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(\"user",{"_index":531,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt",{"_index":319,"title":{},"body":{"injectables/HashService.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":337,"title":{},"body":{"injectables/HashService.html":{}}}],["bcrypt.gensalt",{"_index":335,"title":{},"body":{"injectables/HashService.html":{}}}],["bcrypt.hash(data",{"_index":336,"title":{},"body":{"injectables/HashService.html":{}}}],["body",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":419,"title":{},"body":{"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":641,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":639,"title":{},"body":{"modules.html":{}}}],["building",{"_index":588,"title":{},"body":{"index.html":{}}}],["cadena",{"_index":326,"title":{},"body":{"injectables/HashService.html":{}}}],["canactivate",{"_index":411,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":415,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["catch(exception",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["certain",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":390,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":391,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":392,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":513,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":514,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":515,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["common/filters/all",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":382,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(httpadapterhost",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["constructor(partial",{"_index":455,"title":{},"body":{"classes/UserEntity.html":{}}}],["constructor(prisma",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":412,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context",{"_index":418,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":428,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":438,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":72,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":501,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":538,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createdat",{"_index":452,"title":{},"body":{"classes/UserEntity.html":{}}}],["createuserdto",{"_index":144,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["ctx",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["da",{"_index":431,"title":{},"body":{"guards/RolesGuard.html":{}}}],["data",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":458,"title":{},"body":{"classes/UserEntity.html":{}}}],["date().toisostring",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["de",{"_index":315,"title":{},"body":{"injectables/HashService.html":{}}}],["declarations",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorador",{"_index":424,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decorators",{"_index":77,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["del",{"_index":425,"title":{},"body":{"guards/RolesGuard.html":{}}}],["delete",{"_index":493,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('profile",{"_index":511,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteduser",{"_index":535,"title":{},"body":{"injectables/UsersService.html":{}}}],["denied",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":87,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":310,"title":{},"body":{"injectables/HashService.html":{},"injectables/JwtRefreshGuard.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":600,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":539,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":496,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":611,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":589,"title":{},"body":{"index.html":{}}}],["el",{"_index":313,"title":{},"body":{"injectables/HashService.html":{},"injectables/JwtRefreshGuard.html":{},"guards/RolesGuard.html":{}}}],["email",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["en",{"_index":423,"title":{},"body":{"guards/RolesGuard.html":{}}}],["enableshutdownhooks",{"_index":398,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":400,"title":{},"body":{"injectables/PrismaService.html":{}}}],["endpoint",{"_index":426,"title":{},"body":{"guards/RolesGuard.html":{}}}],["error",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["es",{"_index":435,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exception",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getresponse",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":9,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["exceptions.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:11",{"_index":17,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:14",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exclude",{"_index":466,"title":{},"body":{"classes/UserEntity.html":{}}}],["executioncontext",{"_index":416,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exigido",{"_index":422,"title":{},"body":{"guards/RolesGuard.html":{}}}],["expiresin",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":349,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{}}}],["extractjwt",{"_index":345,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":353,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["extrae",{"_index":420,"title":{},"body":{"guards/RolesGuard.html":{}}}],["false",{"_index":355,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":476,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":477,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(@request",{"_index":507,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(req",{"_index":482,"title":{},"body":{"controllers/UsersController.html":{}}}],["finduserbyemail",{"_index":519,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyemail(email",{"_index":522,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{}}}],["forbiddenexception",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('access",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["found",{"_index":532,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":587,"title":{},"body":{"index.html":{}}}],["function",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":581,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('logout",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('profile",{"_index":506,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('refresh",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":583,"title":{"index.html":{}},"body":{}}],["gettokens",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(user",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["global",{"_index":394,"title":{},"body":{"modules/PrismaModule.html":{}}}],["grow",{"_index":618,"title":{},"body":{"index.html":{}}}],["guard",{"_index":363,"title":{"guards/RolesGuard.html":{}},"body":{"injectables/JwtRefreshGuard.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":409,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["hash",{"_index":331,"title":{},"body":{"injectables/HashService.html":{}}}],["hashdata",{"_index":320,"title":{},"body":{"injectables/HashService.html":{}}}],["hashdata(data",{"_index":322,"title":{},"body":{"injectables/HashService.html":{}}}],["hasheada",{"_index":329,"title":{},"body":{"injectables/HashService.html":{}}}],["hashear",{"_index":328,"title":{},"body":{"injectables/HashService.html":{}}}],["hashedpassword",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedrefreshtoken",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashing",{"_index":314,"title":{},"body":{"injectables/HashService.html":{}}}],["hashservice",{"_index":185,"title":{"injectables/HashService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"coverage.html":{},"overview.html":{}}}],["hay",{"_index":430,"title":{},"body":{"guards/RolesGuard.html":{}}}],["hello",{"_index":122,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"index.html":{}}}],["host",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter.getrequestmethod(ctx.getrequest",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter.getrequesturl(ctx.getrequest",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter.reply(ctx.getresponse",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapterhost",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpexception",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["https://nestjs.com",{"_index":635,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["id",{"_index":453,"title":{},"body":{"classes/UserEntity.html":{}}}],["identifier",{"_index":540,"title":{},"body":{"coverage.html":{}}}],["if(!deleteduser",{"_index":537,"title":{},"body":{"injectables/UsersService.html":{}}}],["if(!role",{"_index":433,"title":{},"body":{"guards/RolesGuard.html":{}}}],["if(!user",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":354,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["igual",{"_index":436,"title":{},"body":{"guards/RolesGuard.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UserEntity.html":{}}}],["import",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":401,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":118,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":119,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installation",{"_index":597,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":599,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["internal",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["isemail",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["ismatch",{"_index":321,"title":{},"body":{"injectables/HashService.html":{}}}],["ismatch(data",{"_index":330,"title":{},"body":{"injectables/HashService.html":{}}}],["isnotempty",{"_index":299,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isemail",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@minlength(2",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstrongpassword({minlength",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@minlength(9)@maxlength(15",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":449,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring",{"_index":447,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring()@minlength(2",{"_index":442,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@minlength(9)@maxlength(15",{"_index":445,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring",{"_index":300,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstrongpassword",{"_index":301,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":625,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":348,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"dependencies.html":{}}}],["jwtaccessstrategy",{"_index":186,"title":{"injectables/JwtAccessStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAccessStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtauthguard",{"_index":161,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":352,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["jwtmodule",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtrefreshguard",{"_index":163,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshstrategy",{"_index":187,"title":{"injectables/JwtRefreshStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["kamil",{"_index":632,"title":{},"body":{"index.html":{}}}],["la",{"_index":317,"title":{},"body":{"injectables/HashService.html":{}}}],["lastname",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{}}}],["legend",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["librería",{"_index":318,"title":{},"body":{"injectables/HashService.html":{}}}],["license",{"_index":638,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":615,"title":{},"body":{"index.html":{}}}],["local",{"_index":387,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":156,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":188,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@request",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(email",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout(req",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["matching",{"_index":71,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":302,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maxlength(15",{"_index":308,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maxlength(16",{"_index":306,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["metadata",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":303,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(2",{"_index":305,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(9",{"_index":307,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlowercase",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minnumbers",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minsymbols",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minuppercase",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":580,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":614,"title":{},"body":{"index.html":{}}}],["mobile",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{}}}],["mode",{"_index":604,"title":{},"body":{"index.html":{}}}],["models/user.entity",{"_index":500,"title":{},"body":{"controllers/UsersController.html":{}}}],["module",{"_index":84,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/HashService.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":86,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":628,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":633,"title":{},"body":{"index.html":{}}}],["name",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":593,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":637,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["node.js",{"_index":586,"title":{},"body":{"index.html":{}}}],["npm",{"_index":598,"title":{},"body":{"index.html":{}}}],["null",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":462,"title":{},"body":{"classes/UserEntity.html":{}}}],["object.assign(this",{"_index":472,"title":{},"body":{"classes/UserEntity.html":{}}}],["onmoduleinit",{"_index":399,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":616,"title":{},"body":{"index.html":{}}}],["optional",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":642,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":561,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":312,"title":{},"body":{"injectables/HashService.html":{}}}],["param",{"_index":333,"title":{},"body":{"injectables/HashService.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":18,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":491,"title":{},"body":{"controllers/UsersController.html":{}}}],["partial",{"_index":456,"title":{},"body":{"classes/UserEntity.html":{}}}],["passport",{"_index":347,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":344,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":350,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":375,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["password",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UserEntity.html":{}}}],["patch",{"_index":492,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile",{"_index":509,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["payload",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["please",{"_index":626,"title":{},"body":{"index.html":{}}}],["post",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["prisma",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["prisma.service",{"_index":395,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":397,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":97,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":207,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.jwt_access_secret",{"_index":357,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["process.env.jwt_refresh_secret",{"_index":374,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["production",{"_index":606,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":585,"title":{},"body":{"index.html":{}}}],["project",{"_index":617,"title":{},"body":{"index.html":{}}}],["promise",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":277,"title":{"properties.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"properties.html":{}}}],["provide",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["que",{"_index":364,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["read",{"_index":627,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{}}}],["realiza",{"_index":324,"title":{},"body":{"injectables/HashService.html":{}}}],["reflect",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":413,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refresh",{"_index":368,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["refresh.guard",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh.guard.ts",{"_index":362,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh.strategy",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["refresh.strategy.ts",{"_index":370,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["refresh.strategy.ts:18",{"_index":373,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refresh.strategy.ts:8",{"_index":371,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refreshtoken",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{}}}],["refreshtokenmatches",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokens(@request",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(email",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens(req",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["remove",{"_index":478,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(email",{"_index":524,"title":{},"body":{"injectables/UsersService.html":{}}}],["remove(req",{"_index":485,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":596,"title":{},"body":{"index.html":{}}}],["req",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshStrategy.html":{},"controllers/UsersController.html":{}}}],["req.get('authorization').replace('bearer",{"_index":377,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["req.user.refreshtoken",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["request.user",{"_index":439,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["response",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsebody",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["results",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rol",{"_index":421,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":497,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":502,"title":{},"body":{"controllers/UsersController.html":{}}}],["rolesguard",{"_index":408,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rolesguard)@roles(role.admin)@get",{"_index":480,"title":{},"body":{"controllers/UsersController.html":{}}}],["run",{"_index":601,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":334,"title":{},"body":{"injectables/HashService.html":{}}}],["scalable",{"_index":590,"title":{},"body":{"index.html":{}}}],["secret",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":356,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["server",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"index.html":{}}}],["services/hash.service",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["servicio",{"_index":311,"title":{},"body":{"injectables/HashService.html":{}}}],["setmetadata",{"_index":494,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata('role",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["si",{"_index":429,"title":{},"body":{"guards/RolesGuard.html":{}}}],["side",{"_index":591,"title":{},"body":{"index.html":{}}}],["signup",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(dto",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["situations",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":620,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":582,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":121,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:14",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:20",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:26",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:11",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:31",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:39",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:45",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:49",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:77",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:82",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator",{"_index":498,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":546,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/create",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":358,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":379,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard",{"_index":499,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":410,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:11",{"_index":417,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:8",{"_index":414,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/services/hash.service.ts",{"_index":309,"title":{},"body":{"injectables/HashService.html":{},"coverage.html":{}}}],["src/auth/services/hash.service.ts:16",{"_index":323,"title":{},"body":{"injectables/HashService.html":{}}}],["src/auth/services/hash.service.ts:27",{"_index":332,"title":{},"body":{"injectables/HashService.html":{}}}],["src/auth/strategies/jwt",{"_index":338,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":381,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:15",{"_index":385,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:8",{"_index":383,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/common/filters/all",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":555,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module.ts",{"_index":393,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":396,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:10",{"_index":402,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":404,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/users/dto/update",{"_index":441,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/models/user.entity.ts",{"_index":451,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/users/models/user.entity.ts:11",{"_index":463,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:12",{"_index":469,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:13",{"_index":461,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:14",{"_index":464,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:15",{"_index":460,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:16",{"_index":465,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:19",{"_index":468,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:22",{"_index":467,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:24",{"_index":459,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:25",{"_index":470,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:6",{"_index":457,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.controller.ts",{"_index":474,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:17",{"_index":481,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:24",{"_index":484,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:30",{"_index":490,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":487,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":516,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/users.service.ts",{"_index":518,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:14",{"_index":523,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":527,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":525,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:6",{"_index":520,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":521,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":602,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":605,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":607,"title":{},"body":{"index.html":{}}}],["started",{"_index":584,"title":{"index.html":{}},"body":{}}],["starter",{"_index":595,"title":{},"body":{"index.html":{}}}],["statements",{"_index":541,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["stay",{"_index":629,"title":{},"body":{"index.html":{}}}],["strategies/jwt",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":346,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":351,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":621,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":640,"title":{},"body":{"modules.html":{}}}],["table",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":610,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":613,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":612,"title":{},"body":{"index.html":{}}}],["tests",{"_index":609,"title":{},"body":{"index.html":{}}}],["texto",{"_index":327,"title":{},"body":{"injectables/HashService.html":{}}}],["thanks",{"_index":619,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":405,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":406,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(req.user",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(req.user.email",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens(req.user.email",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(dto",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":389,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashservice.hashdata(dto.password",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashservice.hashdata(refreshtoken",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashservice.ismatch(password",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashservice.ismatch(refreshtoken",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.httpadapterhost",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.jwtservice.signasync",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.create",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.delete",{"_index":536,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findmany",{"_index":529,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":530,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":534,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.get('role",{"_index":427,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.updaterefreshtoken(email",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtoken(user.email",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findall",{"_index":503,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyemail(email",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.finduserbyemail(req.user.email",{"_index":508,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(req.user.id",{"_index":512,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(email",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.update(req.user.email",{"_index":510,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["thus",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["tiene",{"_index":366,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["timestamp",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["tokens",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens.refreshtoken",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":630,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":471,"title":{},"body":{"classes/UserEntity.html":{},"dependencies.html":{}}}],["trim",{"_index":378,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["true",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtRefreshStrategy.html":{},"guards/RolesGuard.html":{}}}],["twitter",{"_index":636,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typescript",{"_index":594,"title":{},"body":{"index.html":{}}}],["un",{"_index":367,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["una",{"_index":325,"title":{},"body":{"injectables/HashService.html":{}}}],["unauthorizedexception",{"_index":386,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unit",{"_index":608,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":648,"title":{},"body":{"properties.html":{}}}],["update",{"_index":479,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(dto",{"_index":488,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(email",{"_index":526,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedat",{"_index":454,"title":{},"body":{"classes/UserEntity.html":{}}}],["updateduser",{"_index":533,"title":{},"body":{"injectables/UsersService.html":{}}}],["updaterefreshtoken",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(email",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto",{"_index":440,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["useclass",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@delete('profile",{"_index":486,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('logout",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":483,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@patch('profile",{"_index":489,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtrefreshguard",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":443,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:13",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:16",{"_index":444,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:18",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":446,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:22",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":448,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:35",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:6",{"_index":450,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:8",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.refreshtoken",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["userentity",{"_index":159,"title":{"classes/UserEntity.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userentity(await",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["userentity(user",{"_index":505,"title":{},"body":{"controllers/UsersController.html":{}}}],["usernamefield",{"_index":388,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":475,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":517,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map((user",{"_index":504,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.service",{"_index":495,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/models/user.entity",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["users/users.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":473,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":98,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":208,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["utiliza",{"_index":316,"title":{},"body":{"injectables/HashService.html":{}}}],["validate",{"_index":340,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(@request",{"_index":376,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["validate(email",{"_index":384,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":342,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["validate(req",{"_index":372,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["validateuser",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":304,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":547,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":649,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifica",{"_index":365,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["version",{"_index":646,"title":{},"body":{"properties.html":{}}}],["void",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{}}}],["válido",{"_index":369,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["watch",{"_index":603,"title":{},"body":{"index.html":{}}}],["website",{"_index":634,"title":{},"body":{"index.html":{}}}],["world",{"_index":123,"title":{},"body":{"injectables/AppService.html":{}}}],["y",{"_index":434,"title":{},"body":{"guards/RolesGuard.html":{}}}],["you'd",{"_index":624,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/all-exceptions.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/all-exceptions.filter.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/all-exceptions.filter.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ExceptionFilter,\n    Catch,\n    ArgumentsHost,\n    HttpException,\n    HttpStatus,\n  } from '@nestjs/common';\n  import { HttpAdapterHost } from '@nestjs/core';\n  \n  @Catch()\n  export class AllExceptionsFilter implements ExceptionFilter {\n    constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n  \n    catch(exception: unknown, host: ArgumentsHost): void {\n      // In certain situations `httpAdapter` might not be available in the\n      // constructor method, thus we should resolve it here.\n      const { httpAdapter } = this.httpAdapterHost;\n  \n      const ctx = host.switchToHttp();\n      \n      const httpStatus =\n        exception instanceof HttpException\n          ? exception.getStatus()\n          : HttpStatus.INTERNAL_SERVER_ERROR;\n\n      const message = \n        exception instanceof HttpException\n          ? exception.message\n          : \"Internal Server Error\";\n\n      const response =\n        exception instanceof HttpException\n          ? exception.getResponse()\n          : {};\n\n      const responseBody = {\n        statusCode: httpStatus,\n        message: message,\n        response: response,\n        timestamp: new Date().toISOString(),\n        path: httpAdapter.getRequestUrl(ctx.getRequest()),\n        method: httpAdapter.getRequestMethod(ctx.getRequest()),\n      };\n  \n      httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n    }\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { APP_FILTER } from '@nestjs/core';\nimport { AllExceptionsFilter } from './common/filters/all-exceptions.filter';\n\n@Module({\n  imports: [ \n    ConfigModule.forRoot({\n      isGlobal: true,\n    }), PrismaModule, AuthModule, UsersModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_FILTER,\n      useClass: AllExceptionsFilter,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                logout\n                            \n                            \n                                    \n                                    \n                                refreshTokens\n                            \n                            \n                                    \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(dto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Request, UseGuards } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { AuthService } from './auth.service';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { UserEntity } from '../users/models/user.entity';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { JwtRefreshGuard } from './guards/jwt-refresh.guard';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(private authService: AuthService){}\n\n    @Post('signup')\n    async signup(@Body() dto: CreateUserDto){\n        return new UserEntity(await this.authService.signup(dto));\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Get('logout')\n    logout(@Request() req) {\n        this.authService.logout(req.user.email);\n    }\n\n    @UseGuards(LocalAuthGuard)\n    @Post('login')\n    login(@Request() req) {\n        return this.authService.login(req.user);\n    }\n\n    @UseGuards(JwtRefreshGuard)\n    @Get('refresh')\n    refreshTokens(@Request() req) {\n        return this.authService.refreshTokens(req.user.email, req.user.refreshToken);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nHashService\n\nHashService\n\nAuthModule -->\n\nHashService->AuthModule\n\n\n\n\n\nJwtAccessStrategy\n\nJwtAccessStrategy\n\nAuthModule -->\n\nJwtAccessStrategy->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashService\n                        \n                        \n                            JwtAccessStrategy\n                        \n                        \n                            JwtRefreshStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { HashService } from './services/hash.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtAccessStrategy } from './strategies/jwt-access.strategy';\nimport { JwtRefreshStrategy } from './strategies/jwt-refresh.strategy';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n    })\n  ],\n  providers: [AuthService, HashService, LocalStrategy, JwtAccessStrategy, JwtRefreshStrategy],\n  controllers: [AuthController]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, hashService: HashService, usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashService\n                                                  \n                                                        \n                                                                        HashService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(email: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(dto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(email: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { HashService } from './services/hash.service';\nimport { UsersService } from 'src/users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from '@prisma/client';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private prisma: PrismaService,\n        private hashService: HashService,\n        private usersService: UsersService,\n        private jwtService: JwtService,\n        private configService: ConfigService,\n    ){}\n\n    async signup(dto: CreateUserDto): Promise {\n        const hashedPassword = await this.hashService.hashData(dto.password);\n        const user = await this.prisma.user.create({\n            data: {\n                ...dto,\n                password: hashedPassword,\n            }\n        })\n        return user;\n    }\n\n    async validateUser(email: string, password: string): Promise {\n        const user = await this.usersService.findUserByEmail(email);\n        if (user && await this.hashService.isMatch(password, user.password)) {\n            return user;\n        }\n        return null;\n    }\n\n    async login(user: any) {\n        const tokens = await this.getTokens(user);\n        await this.updateRefreshToken(user.email, tokens.refreshToken);\n        return tokens;\n    }\n\n    async logout(email: string) {\n        return this.usersService.update(email, { refreshToken: null });\n    }\n\n    async getTokens(user: any) {\n        const payload = {\n            sub: user.id,\n            email: user.email,\n            role: user.role,\n        }\n        const [accessToken, refreshToken] = await Promise.all([\n            this.jwtService.signAsync(\n                payload,\n                {\n                    secret: this.configService.get('JWT_ACCESS_SECRET'),\n                    expiresIn: '15m',\n                },\n            ),\n            this.jwtService.signAsync(\n                payload,\n                {\n                    secret: this.configService.get('JWT_REFRESH_SECRET'),\n                    expiresIn: '7d',\n                },\n            ),\n        ]);\n        return {\n            accessToken,\n            refreshToken,\n        }\n    }\n\n    async updateRefreshToken(email: string, refreshToken: string) {\n        const hashedRefreshToken = await this.hashService.hashData(refreshToken);\n        await this.usersService.update(email, { refreshToken: hashedRefreshToken});\n    }\n\n    async refreshTokens(email: string, refreshToken: string) {\n        const user = await this.usersService.findUserByEmail(email);\n        if(!user || !user.refreshToken) {\n            throw new ForbiddenException('Access Denied');\n        }\n        const refreshTokenMatches = await this.hashService.isMatch(refreshToken, user.refreshToken);\n        if (!refreshTokenMatches) {\n            throw new ForbiddenException('Access Denied');\n        }\n        const tokens = await this.getTokens(user);\n        await this.updateRefreshToken(email, tokens.refreshToken);\n        return tokens;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                mobile\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        mobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(9)@MaxLength(15)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsStrongPassword({minLength: 8, minLowercase: 1, minUppercase: 1, minNumbers: 1, minSymbols: 1})@MaxLength(16)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from \"@prisma/client\";\nimport { IsEmail, IsNotEmpty, IsString, IsStrongPassword, MaxLength, MinLength } from \"class-validator\";\n\n\nexport class CreateUserDto {\n    role: Role;\n\n    @IsNotEmpty()\n    @IsString()\n    @MinLength(2)\n    firstName: string;\n\n    @IsNotEmpty()\n    @IsString()\n    @MinLength(2)\n    lastName: string;\n\n    @IsNotEmpty()\n    @IsEmail()\n    email: string;\n\n    @IsNotEmpty()\n    @IsStrongPassword(\n        {\n            minLength: 8,\n            minLowercase: 1,\n            minUppercase: 1,\n            minNumbers: 1,\n            minSymbols: 1\n        }\n    )\n    @MaxLength(16)\n    password: string;\n\n    @IsNotEmpty()\n    @MinLength(9)\n    @MaxLength(15)\n    mobile: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashService.html":{"url":"injectables/HashService.html","title":"injectable - HashService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/services/hash.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Servicio para el hashing de data. Utiliza la librería bcrypt\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                hashData\n                            \n                            \n                                    Async\n                                isMatch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hashData\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashData(data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/services/hash.service.ts:16\n                \n            \n\n\n            \n                \n                    Realiza el hashing de una cadena de texto\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nData a hashear\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nData hasheada\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        isMatch\n                        \n                    \n                \n            \n            \n                \n                    \n                    isMatch(data: string, hash: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/services/hash.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\n\n/**\n * Servicio para el hashing de data. Utiliza la librería bcrypt\n * @module AuthModule\n */\n@Injectable()\nexport class HashService {\n\n    /**\n     * Realiza el hashing de una cadena de texto\n     * @param {string} data - Data a hashear\n     * @returns {string} - Data hasheada\n     */\n    async hashData(data: string): Promise {\n        const salt = await bcrypt.genSalt();\n        return bcrypt.hash(data, salt);\n    }\n\n    /**\n     * \n     * @param {string} data \n     * @param {string} hash \n     * @returns \n     */\n    async isMatch(data: string, hash: string): Promise {\n        return bcrypt.compare(data, hash)\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAccessStrategy.html":{"url":"injectables/JwtAccessStrategy.html","title":"injectable - JwtAccessStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAccessStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-access.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-access.strategy.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt-access.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\n\n\n\n@Injectable()\nexport class JwtAccessStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor() {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: process.env.JWT_ACCESS_SECRET,\n        })\n    }\n\n    async validate(payload: any) {\n        return payload;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-refresh.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard que verifica que el request tiene un refresh jwt válido\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n/**\n * Guard que verifica que el request tiene un refresh jwt válido\n */\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshStrategy.html":{"url":"injectables/JwtRefreshStrategy.html","title":"injectable - JwtRefreshStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-refresh.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-refresh.strategy.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt-refresh.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Request } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\n\n\n\n@Injectable()\nexport class JwtRefreshStrategy extends PassportStrategy(Strategy, 'jwt-refresh') {\n    constructor() {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: process.env.JWT_REFRESH_SECRET,\n            passReqToCallback: true,\n        })\n    }\n\n    async validate(@Request() req, payload: any) {\n        const refreshToken = req.get('Authorization').replace('Bearer', '').trim();\n        return { ...payload, refreshToken};\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Strategy } from \"passport-local\";\nimport { AuthService } from \"../auth.service\";\n\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private authService: AuthService) {\n        super({\n            usernameField: 'email'\n        })\n    }\n\n    async validate(email: string, password: string): Promise {\n        const user = await this.authService.validateUser(email, password);\n        if(!user) {\n            throw new UnauthorizedException();\n        }\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit{\n    async onModuleInit() {\n        await this.$connect();\n    }\n\n    async enableShutdownHooks(app: INestApplication) {\n        this.$on('beforeExit', async () => {\n            await app.close();\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/roles.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\n\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor(private reflector: Reflector) {}\n\n    canActivate(context: ExecutionContext): boolean {\n        \n        // Extrae el rol exigido en el decorador @Role del endpoint\n        const role = this.reflector.get('role', context.getHandler());\n        \n        // Si no hay rol exigido el Guard da acceso\n        if(!role) {\n            return true;\n        }\n\n        // Extrae el rol del request y si es igual al exigido el Guard da acceso\n        const request = context.switchToHttp().getRequest();\n        const user = request.user;\n        return (user.role === role)\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                mobile\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                refreshToken\n                            \n                            \n                                    \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MinLength(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MinLength(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        mobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@MinLength(9)@MaxLength(15)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from \"@prisma/client\";\nimport { IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class UpdateUserDto {\n    @IsOptional()\n    role?: Role;\n\n    @IsOptional()\n    @IsString()\n    @MinLength(2)\n    firstName?: string;\n\n    @IsOptional()\n    @IsString()\n    @MinLength(2)\n    lastName?: string;\n\n    @IsOptional()\n    @MinLength(9)\n    @MaxLength(15)\n    mobile?: string;\n\n    @IsOptional()\n    @IsString()\n    refreshToken?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                lastName\n                            \n                            \n                                mobile\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                refreshToken\n                            \n                            \n                                role\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/users/models/user.entity.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role, User } from \"@prisma/client\";\nimport { Exclude } from \"class-transformer\";\n\n\n\nexport class UserEntity implements User {\n    constructor(partial: Partial) {\n        Object.assign(this, partial);\n    }\n\n    id: number;\n    role: Role;\n    firstName: string;\n    lastName: string;\n    email: string;\n    mobile: string;\n\n    @Exclude()\n    refreshToken: string;\n\n    @Exclude()\n    password: string;\n\n    createdAt: Date;\n    updatedAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.ADMIN)@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('profile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dto: UpdateUserDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('profile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Request, Param, ParseIntPipe, Patch, UseGuards, Delete, SetMetadata } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { Role } from '@prisma/client';\nimport { RolesGuard } from 'src/auth/guards/roles.guard';\nimport { UserEntity } from './models/user.entity';\n\n@Controller('users')\nexport class UsersController {\n    constructor(private usersService: UsersService) {}\n\n    @UseGuards(JwtAuthGuard, RolesGuard)\n    @Roles(Role.ADMIN)\n    @Get()\n    async findAll() {\n        const users = await this.usersService.findAll();\n        return users.map((user) => new UserEntity(user));\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Get('profile')\n    async findOne(@Request() req) {\n        return new UserEntity(await this.usersService.findUserByEmail(req.user.email));\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Patch('profile')\n    async update(\n        @Body() dto: UpdateUserDto,\n        @Request() req\n    ) {\n        return new UserEntity(await this.usersService.update(req.user.email, dto));\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Delete('profile')\n    async remove(\n        @Request() req\n    ) {\n        return new UserEntity(await this.usersService.remove(req.user.id));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n@Module({\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(email: string, dto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UsersService {\n    constructor(private prisma: PrismaService){}\n\n    async findAll(): Promise {\n        const users = await this.prisma.user.findMany();\n        return users;\n    }\n\n    async findUserByEmail(email: string): Promise {\n        const user = await this.prisma.user.findUnique({\n            where: {\n                email: email,\n            }\n        });\n        if(!user) {\n            throw new BadRequestException(\"User not found\");\n        }\n        return user;\n    }\n\n    async update(email: string, dto: UpdateUserDto) {\n        const updatedUser = await this.prisma.user.update({\n            data: dto,\n            where: {\n                email: email,\n            },\n        });\n        return updatedUser;\n    }\n  \n    async remove(email: string) {\n        const deletedUser = await this.prisma.user.delete({\n            where: {\n                email: email,\n            },\n        })\n        if(!deletedUser) {\n            throw new BadRequestException(\"User not found\");\n        }\n        return deletedUser;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/services/hash.service.ts\n            \n            injectable\n            HashService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-access.strategy.ts\n            \n            injectable\n            JwtAccessStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-refresh.strategy.ts\n            \n            injectable\n            JwtRefreshStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/filters/all-exceptions.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/models/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^3.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.1.0\n        \n            @nestjs/passport : ^10.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @prisma/client : ^4.16.2\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nHashService\n\nHashService\n\nAuthModule -->\n\nHashService->AuthModule\n\n\n\n\n\nJwtAccessStrategy\n\nJwtAccessStrategy\n\nAuthModule -->\n\nJwtAccessStrategy->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role: string) => SetMetadata('role', role)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
