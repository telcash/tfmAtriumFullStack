var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.084,1,2.023]],["body/classes/AllExceptionsFilter.html",[0,0.081,1,2.683,2,1.748,3,0.306,4,0.265,5,0.265,6,3.99,7,2.53,8,0.306,9,4.186,10,1.18,11,4.186,12,4.186,13,0.826,14,4.186,15,4.186,16,4.186,17,2.683,18,4.79,19,0.492,20,1.18,21,5.162,22,1.813,23,3.037,24,5.597,25,0.906,26,3.037,27,1.286,28,0.034,29,1.286,30,0.992,31,1.18,32,4.186,33,4.79,34,5.162,35,3.037,36,5.162,37,0.857,38,3.487,39,0.422,40,5.162,41,5.162,42,0.395,43,1.947,44,0.306,45,1.44,46,2.53,47,1.44,48,3.037,49,3.037,50,4.186,51,3.037,52,4.186,53,3.037,54,3.037,55,2.53,56,2.425,57,3.037,58,3.037,59,3.037,60,4.79,61,3.037,62,3.037,63,4.79,64,3.037,65,3.037,66,2.53,67,3.037,68,4.79,69,3.037,70,4.186,71,3.037,72,3.037,73,1.44,74,3.037,75,3.037,76,3.037,77,3.037,78,3.037,79,0.022,80,0.022]],["title/controllers/AppController.html",[81,1.497,82,2.023]],["body/controllers/AppController.html",[0,0.114,3,0.433,4,0.375,5,0.375,19,0.695,20,1.479,25,0.929,28,0.033,37,1.211,39,0.529,42,0.558,44,0.433,45,2.036,46,3.577,79,0.027,80,0.027,81,2.486,82,3.361,83,2.036,84,3.577,85,4.912,86,2.237,87,4.294,88,1.909,89,2.949,90,3.577,91,1.436,92,4.294]],["title/modules/AppModule.html",[93,1.253,94,2.023]],["body/modules/AppModule.html",[0,0.087,1,2.819,3,0.329,4,0.285,5,0.285,8,0.329,13,0.867,28,0.034,39,0.608,42,0.424,43,2.093,44,0.329,79,0.023,80,0.023,82,3.187,83,2.085,89,2.979,90,2.72,93,1.973,94,3.965,95,1.548,96,1.548,97,1.879,98,1.879,99,1.548,100,2.861,101,1.879,102,2.72,103,2.72,104,2.72,105,2.979,106,2.979,107,2.712,108,2.53,109,1.879,110,1.879,111,3.265,112,2.29,113,4.397,114,0.712,115,3.18,116,3.663,117,3.265,118,3.265,119,2.361,120,3.265,121,3.265,122,3.265,123,4.397,124,3.265,125,3.265,126,3.265,127,3.265,128,2.093,129,3.265,130,3.265]],["title/injectables/AppService.html",[89,1.644,131,0.275]],["body/injectables/AppService.html",[0,0.118,3,0.449,4,0.389,5,0.389,19,0.721,20,1.512,25,0.964,28,0.033,37,1.256,39,0.449,42,0.579,44,0.449,79,0.028,80,0.028,85,4.973,88,1.953,89,2.793,91,1.49,131,0.468,132,1.368,133,3.712,134,4.455,135,4.455,136,4.455]],["title/controllers/AuthController.html",[81,1.497,137,2.023]],["body/controllers/AuthController.html",[0,0.062,3,0.235,4,0.204,5,0.204,8,0.35,13,0.683,19,0.378,20,0.977,25,0.99,27,1.405,28,0.034,29,1.405,30,0.553,31,1.29,37,1.496,38,1.943,39,0.535,42,0.303,44,0.235,45,1.106,47,1.106,73,1.106,79,0.018,80,0.018,81,1.106,83,1.106,86,2.383,91,1.382,105,1.805,112,1.805,114,0.917,137,2.221,138,1.943,139,1.943,140,2.333,141,2.886,142,1.262,143,2.505,144,2.886,145,2.886,146,1.64,147,2.505,148,2.333,149,2.333,150,2.333,151,3.94,152,2.248,153,2.886,154,3.465,155,2.162,156,4.267,157,4.267,158,1.573,159,2.65,160,4.025,161,2.333,162,2.333,163,2.333,164,2.886,165,2.505,166,2.886,167,2.153,168,2.333,169,2.333,170,2.333,171,2.886,172,2.886,173,2.379,174,1.943,175,2.813,176,3.465,177,2.333,178,3.465,179,2.65,180,1.643,181,1.805,182,1.805,183,2.886,184,0.896,185,3.465,186,1.943,187,2.333,188,1.106,189,1.943,190,1.943,191,1.495,192,1.96,193,1.687,194,2.333,195,2.333,196,1.994,197,2.333,198,3.465,199,1.943,200,2.333,201,2.333,202,1.53,203,2.333,204,1.943,205,2.333,206,1.943,207,2.333,208,2.333,209,2.333,210,2.333,211,2.333,212,2.333,213,2.333,214,2.333,215,2.333,216,2.333,217,2.333,218,2.333]],["title/modules/AuthModule.html",[93,1.253,105,1.644]],["body/modules/AuthModule.html",[0,0.082,3,0.313,4,0.271,5,0.271,8,0.313,28,0.034,39,0.608,42,0.403,44,0.313,79,0.022,80,0.022,83,2.014,93,1.922,95,1.471,96,1.471,97,1.785,98,1.785,99,1.471,100,2.787,101,1.785,105,3.268,107,2.671,108,2.444,109,1.785,110,1.785,112,2.212,114,0.843,116,3.538,137,3.104,192,2.671,193,2.243,219,2.584,220,2.584,221,3.102,222,2.934,223,2.934,224,2.934,225,2.934,226,3.102,227,3.071,228,2.212,229,2.444,230,3.538,231,2.212,232,3.538,233,3.102,234,2.584,235,3.102,236,4.247,237,1.344,238,3.102,239,3.102,240,2.243,241,4.247,242,3.102,243,3.102,244,3.102]],["title/injectables/AuthService.html",[131,0.275,192,1.497]],["body/injectables/AuthService.html",[0,0.028,3,0.107,4,0.092,5,0.092,8,0.384,10,1.235,13,1.009,19,0.171,20,0.515,22,0.792,25,0.872,27,1.238,28,0.033,29,1.238,30,0.954,31,1.136,37,1.344,39,0.406,42,0.137,44,0.107,47,1.363,56,1.898,73,0.866,79,0.009,80,0.009,88,2.057,91,1.274,114,0.937,119,0.765,131,0.159,132,0.325,142,1.912,143,2.079,144,2.395,145,1.522,146,2.128,147,1.322,152,1.796,153,1.522,155,2.426,165,2.079,166,2.96,172,4.2,174,1.522,175,1.868,179,1.843,180,1.144,181,0.952,182,0.952,184,1.304,190,0.881,191,0.678,192,0.866,202,1.465,222,1.985,228,1.985,229,1.052,230,1.522,231,1.851,232,1.522,234,0.881,240,0.765,245,0.881,246,1.547,247,1.322,248,1.828,249,1.828,250,1.828,251,0.881,252,1.363,253,1.806,254,4.029,255,3.81,256,1.057,257,1.052,258,1.828,259,1.057,260,3.174,261,1.928,262,3.553,263,3.696,264,2.742,265,1.047,266,1.828,267,1.828,268,1.868,269,1.828,270,1.057,271,2.348,272,4.029,273,1.828,274,1.057,275,2.901,276,1.851,277,4.217,278,1.828,279,1.057,280,3.247,281,1.828,282,1.057,283,1.828,284,2.665,285,3.28,286,2.665,287,2.414,288,1.843,289,1.828,290,1.057,291,2.395,292,1.828,293,2.808,294,1.057,295,1.828,296,2.705,297,2.875,298,2.875,299,2.875,300,2.348,301,2.414,302,2.011,303,1.828,304,1.057,305,0.881,306,1.057,307,0.458,308,3.247,309,2.011,310,2.414,311,1.057,312,1.828,313,2.482,314,1.057,315,1.057,316,1.057,317,1.057,318,1.057,319,1.828,320,0.765,321,1.057,322,1.057,323,1.057,324,1.057,325,1.828,326,1.057,327,1.828,328,1.522,329,0.765,330,1.828,331,2.079,332,1.057,333,1.057,334,1.057,335,1.057,336,1.057,337,0.551,338,1.057,339,1.057,340,1.828,341,1.828,342,1.057,343,1.828,344,1.057,345,1.057,346,1.057,347,1.057,348,1.828,349,1.057,350,1.057,351,1.057,352,0.881,353,1.057,354,0.765,355,1.057,356,0.765,357,0.765,358,1.828,359,1.322,360,1.828,361,1.828,362,0.881,363,1.057,364,1.828,365,1.057,366,1.057,367,1.057]],["title/classes/CreateUserDto.html",[0,0.084,175,1.816]],["body/classes/CreateUserDto.html",[0,0.113,2,1.781,3,0.312,4,0.27,5,0.27,8,0.312,19,0.501,25,1.218,28,0.033,30,1.333,39,0.428,44,0.312,79,0.022,80,0.022,86,2.839,88,2.194,114,0.686,147,3.066,152,1.683,155,1.683,175,2.44,180,2.01,181,2.209,182,2.209,183,3.532,184,1.097,275,2.783,293,3.101,307,1.341,337,2.932,368,4.802,369,2.238,370,2.44,371,3.498,372,3.498,373,3.498,374,3.095,375,3.095,376,4.24,377,3.095,378,3.095,379,3.095,380,3.095,381,3.095,382,4.24,383,4.24,384,4.802,385,4.24,386,4.24,387,4.24,388,3.095,389,3.095,390,3.095,391,4.24,392,5.63,393,4.03,394,4.24,395,2.578,396,3.532,397,2.238,398,3.532,399,3.095,400,2.578,401,2.578]],["title/injectables/HashService.html",[131,0.275,222,1.644]],["body/injectables/HashService.html",[0,0.07,3,0.266,4,0.23,5,0.23,8,0.448,10,1.069,13,0.957,19,0.427,20,1.069,25,0.821,27,1.165,28,0.033,29,1.165,30,0.898,31,1.069,37,1.368,39,0.382,42,0.343,44,0.266,56,1.143,79,0.02,80,0.02,88,2.207,91,1.268,114,1.003,128,2.43,131,0.331,132,0.81,146,2.123,152,1.505,165,3.508,180,2.536,184,0.981,202,1.484,222,1.975,231,1.975,246,2.43,261,1.789,265,1.381,271,2.742,276,1.975,288,3.11,300,3.508,309,4.915,313,1.374,362,3.158,402,2.198,403,4.851,404,3.791,405,3.791,406,4.041,407,3.791,408,3.791,409,3.791,410,2.639,411,4.041,412,6.061,413,6.061,414,3.791,415,3.791,416,3.791,417,2.639,418,3.791,419,4.851,420,3.791,421,3.791,422,2.639,423,2.639,424,2.639]],["title/injectables/JwtAccessGuard.html",[131,0.275,167,1.644]],["body/injectables/JwtAccessGuard.html",[0,0.109,3,0.413,4,0.357,5,0.357,8,0.413,10,1.635,13,1.004,28,0.033,39,0.514,42,0.532,44,0.413,79,0.026,80,0.026,114,0.824,131,0.444,132,1.257,158,1.564,167,2.651,184,1.317,188,2.413,223,2.651,237,1.773,261,1.702,356,3.681,425,2.623,426,3.409,427,2.651,428,5.091,429,2.929,430,2.929,431,2.413,432,2.651,433,2.959,434,1.94,435,3.409]],["title/injectables/JwtAccessStrategy.html",[131,0.275,223,1.644]],["body/injectables/JwtAccessStrategy.html",[0,0.078,3,0.297,4,0.257,5,0.257,8,0.413,10,1.563,13,1.093,19,0.476,20,1.155,22,2.463,25,0.886,27,0.904,28,0.033,29,0.904,30,0.697,31,0.83,37,1.155,39,0.475,42,0.382,44,0.297,47,1.394,79,0.021,80,0.021,91,0.984,114,0.939,131,0.357,132,0.904,142,1.854,146,1.869,158,1.258,167,2.132,184,1.059,188,1.941,202,0.984,223,2.132,237,1.274,261,1.703,265,1.491,284,2.132,320,2.961,331,4.112,427,2.132,429,2.93,430,2.356,431,1.941,432,2.652,434,1.394,436,3.405,437,2.45,438,2.961,439,2.961,440,3.019,441,2.624,442,3.871,443,3.682,444,2.941,445,2.961,446,4.617,447,4.094,448,2.941,449,2.961,450,2.961,451,3.682,452,2.45,453,2.127,454,2.127,455,2.127,456,2.45,457,2.45,458,2.45,459,2.45,460,2.45,461,2.941]],["title/injectables/JwtRefreshGuard.html",[131,0.275,173,1.816]],["body/injectables/JwtRefreshGuard.html",[0,0.109,3,0.414,4,0.358,5,0.358,8,0.414,10,1.637,13,1.006,28,0.033,39,0.515,42,0.533,44,0.414,79,0.026,80,0.026,131,0.445,132,1.261,158,1.567,173,2.935,184,1.319,188,2.418,224,2.657,237,1.778,261,1.706,354,3.688,425,2.632,427,2.657,429,2.935,430,2.935,431,2.418,432,2.657,433,2.969,434,1.946,435,3.42,462,3.42,463,4.623]],["title/injectables/JwtRefreshStrategy.html",[131,0.275,224,1.644]],["body/injectables/JwtRefreshStrategy.html",[0,0.073,3,0.277,4,0.239,5,0.239,8,0.393,10,1.528,13,1.069,19,0.444,20,1.1,22,2.415,25,0.844,27,0.843,28,0.033,29,0.843,30,0.65,31,0.774,37,1.1,39,0.458,42,0.357,44,0.277,47,1.301,56,1.189,79,0.02,80,0.02,91,0.918,114,0.922,128,1.759,131,0.34,132,0.843,142,1.899,146,1.8,158,1.198,160,3.279,173,2.243,184,1.008,188,2.569,202,1.304,224,2.031,231,2.031,237,1.189,261,1.864,263,3.165,265,1.42,284,2.031,320,2.819,331,4.192,427,2.031,429,2.842,430,2.243,431,1.848,432,2.572,434,1.301,436,3.279,438,2.819,439,2.819,440,2.907,441,2.499,442,3.772,443,3.571,445,2.819,446,4.644,449,2.819,450,2.819,451,3.571,452,2.286,453,1.984,454,1.984,455,1.984,456,2.286,457,2.286,458,2.286,459,2.286,460,2.286,463,2.286,464,2.286,465,2.744,466,2.744,467,2.744,468,2.744,469,2.744,470,2.744,471,2.286,472,2.744,473,2.744]],["title/injectables/LocalAuthGuard.html",[131,0.275,159,2.023]],["body/injectables/LocalAuthGuard.html",[0,0.11,3,0.418,4,0.362,5,0.362,8,0.418,10,1.642,13,1.012,28,0.033,39,0.518,42,0.539,44,0.418,79,0.026,80,0.026,114,0.83,131,0.448,132,1.273,143,3.71,158,1.576,159,3.289,225,2.672,228,2.672,237,1.795,296,4.274,302,4.274,427,2.672,431,2.432,432,2.672,433,2.997,434,1.965,474,3.453,475,3.453,476,5.131,477,4.144]],["title/injectables/LocalStrategy.html",[131,0.275,225,1.644]],["body/injectables/LocalStrategy.html",[0,0.073,3,0.278,4,0.24,5,0.24,8,0.395,10,1.395,13,1.07,19,0.446,20,1.103,22,2.263,25,0.846,27,1.201,28,0.033,29,1.201,30,0.926,31,1.103,37,1.103,39,0.499,42,0.358,44,0.278,45,1.306,56,1.194,73,1.306,79,0.02,80,0.02,88,2.077,91,0.921,114,0.923,131,0.341,132,0.846,142,1.802,146,1.804,155,2.154,158,1.201,192,2.573,193,1.993,202,1.308,225,2.037,237,1.194,261,1.654,264,2.25,265,1.424,275,3.212,288,2.507,293,3.578,313,1.435,328,3.258,329,2.828,357,1.993,359,1.993,431,1.854,432,2.577,434,1.306,438,2.828,439,2.828,440,2.914,441,2.507,442,3.778,443,3.578,445,2.828,449,2.828,450,2.828,451,2.828,453,1.993,454,1.993,455,1.993,478,2.295,479,3.91,480,3.787,481,2.755,482,2.755,483,3.91,484,3.91,485,2.755,486,4.947,487,3.91,488,2.755,489,2.755]],["title/modules/PrismaModule.html",[93,1.253,106,1.644]],["body/modules/PrismaModule.html",[0,0.099,3,0.377,4,0.326,5,0.326,8,0.377,13,1.107,28,0.033,39,0.485,42,0.486,44,0.377,79,0.025,80,0.025,93,2.11,95,1.774,96,1.774,97,2.153,98,2.153,99,1.774,100,3.059,101,3.059,106,3.147,108,2.768,109,2.153,110,2.153,112,2.505,114,0.908,227,3.478,252,2.992,257,2.768,261,1.608,285,3.083,286,2.505,431,2.28,490,3.117,491,3.117,492,3.117,493,3.741,494,4.007,495,4.007,496,4.81,497,3.741]],["title/injectables/PrismaService.html",[131,0.275,252,1.497]],["body/injectables/PrismaService.html",[0,0.077,3,0.291,4,0.252,5,0.252,8,0.408,10,1.14,13,1.213,17,1.852,19,0.468,20,1.14,25,0.875,27,0.888,28,0.033,29,0.888,30,0.684,31,0.815,37,1.14,39,0.408,42,0.375,44,0.291,79,0.021,80,0.021,106,2.106,114,0.995,115,2.924,131,0.353,132,0.888,142,1.472,146,2.245,164,3.369,184,1.046,202,0.966,228,2.106,229,2.327,231,2.106,246,2.592,247,2.924,252,1.917,257,2.327,261,1.352,265,1.472,271,3.654,276,2.106,284,2.106,285,3.533,286,2.87,307,1.252,313,2.106,434,1.917,494,3.369,495,4.209,498,2.407,499,5.053,500,5.318,501,4.043,502,4.043,503,5.511,504,4.043,505,5.053,506,2.889,507,4.043,508,4.043,509,5.053,510,4.043,511,2.889,512,4.043,513,4.043,514,2.889,515,2.889,516,2.889]],["title/guards/RoleGuard.html",[158,0.97,517,2.023]],["body/guards/RoleGuard.html",[0,0.077,3,0.293,4,0.254,5,0.254,8,0.293,10,1.429,17,1.865,19,0.471,20,1.146,22,1.26,25,0.879,27,1.248,28,0.033,29,1.248,30,0.962,31,1.146,37,1.146,39,0.41,42,0.378,43,1.865,44,0.293,45,1.379,56,2.028,79,0.021,80,0.021,91,1.358,114,0.471,128,3.001,131,0.355,142,1.845,151,3.385,152,1.612,155,2.011,158,1.556,184,1.051,188,1.926,202,0.973,231,1.515,261,1.99,264,1.674,265,1.479,268,2.338,284,2.116,300,3.664,337,1.515,354,2.938,356,2.938,427,2.116,430,2.338,471,3.384,517,2.604,518,2.909,519,2.423,520,5.523,521,3.384,522,5.067,523,2.909,524,5.523,525,2.909,526,4.062,527,5.331,528,2.909,529,4.062,530,4.681,531,4.062,532,4.062,533,3.417,534,5.067,535,2.938,536,2.423,537,2.909,538,2.909,539,2.909,540,2.909,541,4.062,542,2.909,543,2.909,544,2.909,545,2.909,546,2.909,547,2.909]],["title/classes/UpdateUserDto.html",[0,0.084,548,1.816]],["body/classes/UpdateUserDto.html",[0,0.117,2,1.879,3,0.329,4,0.285,5,0.285,8,0.329,13,0.867,19,0.528,25,1.202,28,0.033,30,1.315,31,1.716,39,0.444,44,0.329,79,0.023,80,0.023,86,2.892,88,2.164,114,0.861,152,1.745,155,1.745,171,3.663,180,2.085,181,2.29,182,2.29,184,1.137,263,3.187,286,2.29,307,1.414,337,2.979,369,2.361,370,2.53,371,3.595,372,3.595,373,3.595,393,4.432,395,2.72,396,2.72,397,2.361,398,3.663,400,2.72,401,2.72,548,2.53,549,4.765,550,4.397,551,3.265,552,3.265,553,3.265,554,3.265,555,3.265,556,3.265,557,5.846,558,3.265]],["title/classes/UserEntity.html",[0,0.084,196,1.816]],["body/classes/UserEntity.html",[0,0.105,2,1.613,3,0.283,4,0.245,5,0.245,8,0.399,13,0.781,17,2.537,19,0.454,22,1.214,25,1.292,27,0.861,28,0.033,29,0.861,30,1.414,31,0.79,39,0.399,44,0.283,79,0.02,80,0.02,86,2.061,88,2.195,114,0.883,142,1.441,152,1.571,155,1.571,196,2.277,202,0.937,257,2.277,260,3.297,263,2.941,264,3.026,265,1.441,275,2.64,276,2.061,293,2.941,307,1.214,329,2.862,337,2.842,370,2.277,371,3.318,372,3.318,373,3.318,411,3.297,441,2.537,559,2.335,560,4.985,561,3.958,562,3.958,563,3.958,564,3.958,565,4.588,566,4.588,567,4.588,568,3.958,569,5.457,570,2.803,571,3.958,572,3.958,573,3.958,574,3.958,575,4.985,576,2.803,577,2.803,578,2.803,579,3.958,580,2.803,581,2.803,582,2.803,583,5.258,584,2.803,585,2.803,586,2.803,587,2.803,588,2.335,589,2.803]],["title/controllers/UsersController.html",[81,1.497,590,2.023]],["body/controllers/UsersController.html",[0,0.052,3,0.199,4,0.172,5,0.172,8,0.308,10,1.53,13,1.07,19,0.319,20,0.861,25,0.909,27,1.146,28,0.033,29,1.146,30,0.467,31,1.053,37,1.459,39,0.522,42,0.256,44,0.199,45,0.936,47,1.991,56,0.855,73,1.991,79,0.016,80,0.016,81,0.936,83,0.936,86,2.188,91,1.405,107,1.447,112,1.59,114,0.68,139,1.644,141,2.543,142,2.041,146,2.225,151,3.741,152,2.053,155,2.225,156,2.543,157,3.499,158,1.29,160,3.923,167,1.944,179,2.692,180,1.447,181,1.59,182,1.59,184,0.789,186,2.543,188,1.769,189,1.644,191,1.265,196,1.756,199,1.644,202,1.405,204,3.109,206,1.644,253,1.769,261,1.405,265,1.111,268,2.977,276,1.59,286,2.92,307,0.855,313,1.028,337,1.028,425,1.265,517,2.392,533,1.265,535,3.037,548,2.614,590,1.956,591,1.644,592,2.543,593,3.052,594,3.052,595,3.499,596,3.052,597,3.109,598,3.109,599,1.973,600,1.973,601,4.2,602,2.543,603,3.037,604,1.973,605,3.052,606,1.973,607,5.424,608,5.424,609,1.973,610,3.052,611,1.973,612,2.543,613,2.543,614,1.973,615,3.052,616,1.973,617,4.2,618,3.052,619,1.973,620,1.973,621,1.644,622,1.644,623,1.973,624,1.973,625,1.973,626,1.973,627,1.973,628,1.973,629,1.973,630,1.973,631,1.973,632,1.973,633,1.973,634,1.973,635,1.973]],["title/modules/UsersModule.html",[93,1.253,107,1.497]],["body/modules/UsersModule.html",[0,0.101,3,0.384,4,0.332,5,0.332,8,0.384,28,0.033,39,0.541,42,0.495,44,0.384,79,0.025,80,0.025,83,2.306,93,2.127,95,1.805,96,1.805,97,2.19,98,2.19,99,1.805,100,3.084,101,3.084,107,2.876,108,2.799,109,2.19,110,2.19,112,2.533,114,0.914,227,3.517,228,2.533,229,2.799,253,3,590,3.435,603,3.517,621,3.171,636,3.171,637,3.171,638,3.171,639,3.807,640,3.807]],["title/injectables/UsersService.html",[131,0.275,253,1.497]],["body/injectables/UsersService.html",[0,0.052,3,0.197,4,0.171,5,0.171,8,0.422,10,0.855,13,1.067,19,0.317,20,0.855,22,0.847,25,0.979,27,1.284,28,0.033,29,1.284,30,0.99,31,1.179,37,1.455,39,0.422,42,0.254,44,0.197,45,0.927,47,1.437,56,1.811,73,1.437,79,0.016,80,0.016,88,2.037,91,1.398,114,0.945,131,0.265,132,0.601,142,1.742,146,2.22,155,2.381,179,2.899,180,1.759,181,1.579,182,1.579,184,1.238,191,1.254,202,1.398,228,1.579,229,1.744,246,1.943,247,2.192,251,1.629,252,1.982,253,1.437,257,1.744,264,2.405,265,1.742,268,2.405,275,3.516,276,1.579,284,2.686,285,3.468,286,2.914,288,2.679,291,2.525,305,1.629,307,0.847,313,2.177,352,3.482,357,1.414,359,2.192,535,2.192,548,2.603,592,2.525,595,3.482,597,2.525,598,2.525,602,2.525,603,3.023,612,2.525,613,2.525,622,1.629,641,1.629,642,3.031,643,1.956,644,1.956,645,3.031,646,1.956,647,5.158,648,3.031,649,3.031,650,1.956,651,3.031,652,3.031,653,1.956,654,4.18,655,3.031,656,1.956,657,1.956,658,1.956,659,3.031,660,3.031,661,3.031,662,1.956,663,3.031,664,1.956,665,1.956]],["title/coverage.html",[666,3.108]],["body/coverage.html",[0,0.141,1,2.087,5,0.284,6,2.713,7,2.713,28,0.033,30,0.771,73,1.544,79,0.023,80,0.023,81,2.354,82,2.087,84,2.713,89,1.696,99,1.544,131,0.536,133,2.713,137,2.087,138,2.713,158,1,159,2.087,167,1.696,173,1.874,175,1.874,192,1.544,196,1.874,222,1.696,223,1.696,224,1.696,225,1.696,245,2.713,252,1.544,253,1.544,368,2.713,369,3.174,402,2.713,425,2.814,426,2.713,436,3.174,437,2.713,462,2.713,464,2.713,474,2.713,475,2.713,478,2.713,498,2.713,517,2.087,519,2.713,533,2.087,548,1.874,549,2.713,559,2.713,590,2.087,591,2.713,641,2.713,666,2.355,667,3.257,668,3.257,669,3.257,670,4.966,671,4.39,672,6.137,673,4.39,674,3.257,675,3.257,676,2.713,677,3.257,678,5.314,679,3.257,680,3.257,681,4.39,682,4.39,683,5.548,684,2.713,685,3.257,686,3.257,687,4.39,688,3.257,689,3.257,690,3.257,691,3.257,692,3.257,693,3.257]],["title/dependencies.html",[96,1.799,694,2.2]],["body/dependencies.html",[0,0.138,28,0.033,42,0.547,43,2.699,79,0.027,80,0.027,96,1.996,119,3.045,237,1.824,240,3.045,307,1.824,397,3.045,406,3.508,429,2.423,440,3.598,480,3.508,588,3.508,695,5.612,696,4.211,697,4.211,698,4.211,699,4.211,700,4.211,701,4.211,702,4.211,703,4.211,704,4.211,705,4.211,706,4.211,707,4.211,708,4.211,709,4.211,710,4.211,711,4.211,712,4.211]],["title/miscellaneous/functions.html",[713,1.693,714,3.161]],["body/miscellaneous/functions.html",[19,0.794,28,0.029,79,0.029,80,0.029,99,2.84,684,4.088,713,3.145,714,4.088,715,4.907]],["title/index.html",[19,0.427,716,2.641,717,2.641]],["body/index.html",[4,0.326,8,0.376,28,0.033,55,3.108,66,3.108,79,0.025,80,0.025,115,2.698,666,2.698,718,3.73,719,3.73,720,4.801,721,3.73,722,3.73,723,3.73,724,3.73,725,3.73,726,5.309,727,3.73,728,3.73,729,3.73,730,3.73,731,6.038,732,3.73,733,3.73,734,5.936,735,3.73,736,3.73,737,4.801,738,3.73,739,3.73,740,3.73,741,3.73,742,4.801,743,4.801,744,3.73,745,3.73,746,3.73,747,4.801,748,4.801,749,3.73,750,3.73,751,3.73,752,3.73,753,3.73,754,3.108,755,3.73,756,3.73,757,3.73,758,3.73,759,3.73,760,3.73,761,3.73,762,3.73,763,3.73,764,3.108,765,3.73,766,3.73,767,3.73,768,3.73,769,3.73,770,3.73,771,3.108]],["title/modules.html",[95,2.038]],["body/modules.html",[28,0.028,79,0.028,80,0.028,94,2.999,95,2.218,105,2.437,106,2.437,107,2.218,754,5.054,772,6.067,773,6.067,774,6.067]],["title/overview.html",[775,3.581]],["body/overview.html",[2,2.004,28,0.033,79,0.024,80,0.024,83,1.651,89,2.674,93,1.382,94,3.947,95,1.651,96,1.651,97,2.004,98,2.004,99,1.651,100,2.004,101,2.004,102,2.901,103,2.901,104,2.901,105,3.301,106,3.035,107,2.816,108,2.641,109,2.004,110,2.004,132,1.07,158,1.07,192,2.434,219,2.901,220,2.901,222,2.674,223,2.674,224,2.674,225,2.674,252,2.816,253,2.816,384,2.901,490,2.901,491,2.901,492,2.901,636,2.901,637,2.901,638,2.901,775,2.901,776,4.59,777,3.482,778,3.482]],["title/properties.html",[370,2.183,694,2.2]],["body/properties.html",[8,0.49,28,0.033,79,0.029,80,0.029,370,2.792,764,4.042,771,4.042,779,4.852,780,4.852,781,4.852]],["title/miscellaneous/variables.html",[713,1.693,782,3.161]],["body/miscellaneous/variables.html",[19,0.747,28,0.031,79,0.028,80,0.028,88,1.68,152,2.172,184,1.193,268,2.654,521,3.843,533,3.952,536,3.843,676,3.843,713,2.957,782,3.843,783,4.612,784,4.612,785,4.612,786,4.612,787,4.612,788,4.612,789,4.612]]],"invertedIndex":[["",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":780,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":704,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":703,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":705,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":686,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["1.0.0",{"_index":707,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":678,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":680,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":778,"title":{},"body":{"overview.html":{}}}],["14",{"_index":679,"title":{},"body":{"coverage.html":{}}}],["15m",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["16",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["1})@maxlength(16",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["2/12",{"_index":689,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":777,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":683,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":681,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":776,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":706,"title":{},"body":{"dependencies.html":{}}}],["4.16.2",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["8",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8/9",{"_index":675,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":690,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["acceder",{"_index":521,"title":{},"body":{"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["acceso",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessGuard.html":{},"guards/RoleGuard.html":{}}}],["access.guard",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["access.guard.ts",{"_index":426,"title":{},"body":{"injectables/JwtAccessGuard.html":{},"coverage.html":{}}}],["access.strategy",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{}}}],["access.strategy.ts",{"_index":437,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"coverage.html":{}}}],["access.strategy.ts:11",{"_index":444,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["access.strategy.ts:29",{"_index":448,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["accesstoken",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["actualiza",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["actualización",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{}}}],["actualizado",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["actualizados",{"_index":618,"title":{},"body":{"controllers/UsersController.html":{}}}],["actualizar",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["al",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["amazing",{"_index":755,"title":{},"body":{"index.html":{}}}],["anotar",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["antes",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["aplicación",{"_index":509,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":516,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":82,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":725,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":94,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":89,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["async",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["autenticación",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["autenticado",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":475,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":137,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":433,"title":{},"body":{"injectables/JwtAccessGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":435,"title":{},"body":{"injectables/JwtAccessGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('local",{"_index":477,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":105,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":764,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":192,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autorización",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["available",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["await",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":756,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(\"user",{"_index":659,"title":{},"body":{"injectables/UsersService.html":{}}}],["base",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{}}}],["bcrypt",{"_index":406,"title":{},"body":{"injectables/HashService.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":424,"title":{},"body":{"injectables/HashService.html":{}}}],["bcrypt.gensalt",{"_index":422,"title":{},"body":{"injectables/HashService.html":{}}}],["bcrypt.hash(data",{"_index":423,"title":{},"body":{"injectables/HashService.html":{}}}],["body",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":530,"title":{},"body":{"guards/RoleGuard.html":{}}}],["bootstrap",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":774,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":772,"title":{},"body":{"modules.html":{}}}],["building",{"_index":721,"title":{},"body":{"index.html":{}}}],["busca",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["buscamos",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["buscar",{"_index":648,"title":{},"body":{"injectables/UsersService.html":{}}}],["cadena",{"_index":412,"title":{},"body":{"injectables/HashService.html":{}}}],["canactivate",{"_index":522,"title":{},"body":{"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":526,"title":{},"body":{"guards/RoleGuard.html":{}}}],["captura",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["caso",{"_index":507,"title":{},"body":{"injectables/PrismaService.html":{}}}],["catch",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["catch(exception",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["certain",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["cierre",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PrismaService.html":{}}}],["clase",{"_index":571,"title":{},"body":{"classes/UserEntity.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"overview.html":{}}}],["cliente",{"_index":563,"title":{},"body":{"classes/UserEntity.html":{}}}],["cluster_appmodule",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":490,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":491,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":492,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":636,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":637,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":638,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["coincide",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["common/filters/all",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["como",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/UserEntity.html":{}}}],["comparamos",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparar",{"_index":419,"title":{},"body":{"injectables/HashService.html":{}}}],["comprueba",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashService.html":{}}}],["con",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/PrismaService.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["conecta",{"_index":512,"title":{},"body":{"injectables/PrismaService.html":{}}}],["conexion",{"_index":494,"title":{},"body":{"modules/PrismaModule.html":{},"injectables/PrismaService.html":{}}}],["conexión",{"_index":501,"title":{},"body":{"injectables/PrismaService.html":{}}}],["configmodule",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":481,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(httpadapterhost",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["constructor(partial",{"_index":568,"title":{},"body":{"classes/UserEntity.html":{}}}],["constructor(prisma",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":523,"title":{},"body":{"guards/RoleGuard.html":{}}}],["contenga",{"_index":428,"title":{},"body":{"injectables/JwtAccessGuard.html":{}}}],["context",{"_index":529,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.gethandler",{"_index":538,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":545,"title":{},"body":{"guards/RoleGuard.html":{}}}],["controlador",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["controller",{"_index":81,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":626,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corresponde",{"_index":418,"title":{},"body":{"injectables/HashService.html":{}}}],["corresponden",{"_index":420,"title":{},"body":{"injectables/HashService.html":{}}}],["correspondiente",{"_index":647,"title":{},"body":{"injectables/UsersService.html":{}}}],["coverage",{"_index":666,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["crea",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["creación",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["creado",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["crear",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["crearan",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["createdat",{"_index":565,"title":{},"body":{"classes/UserEntity.html":{}}}],["createuserdto",{"_index":175,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["credencial",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["credenciales",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalAuthGuard.html":{}}}],["ctx",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["cualquier",{"_index":572,"title":{},"body":{"classes/UserEntity.html":{}}}],["da",{"_index":541,"title":{},"body":{"guards/RoleGuard.html":{}}}],["dado",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":575,"title":{},"body":{"classes/UserEntity.html":{}}}],["date().toisostring",{"_index":74,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["datos",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["de",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["declarations",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorador",{"_index":536,"title":{},"body":{"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["del",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":620,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('profile",{"_index":610,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteduser",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["denied",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":96,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desconexión",{"_index":510,"title":{},"body":{"injectables/PrismaService.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":733,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":622,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":744,"title":{},"body":{"index.html":{}}}],["editar",{"_index":617,"title":{},"body":{"controllers/UsersController.html":{}}}],["efficient",{"_index":722,"title":{},"body":{"index.html":{}}}],["ejecuta",{"_index":438,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["el",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["elimina",{"_index":651,"title":{},"body":{"injectables/UsersService.html":{}}}],["eliminado",{"_index":613,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["eliminar",{"_index":612,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ella",{"_index":574,"title":{},"body":{"classes/UserEntity.html":{}}}],["email",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["en",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{}}}],["enableshutdownhooks",{"_index":502,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":504,"title":{},"body":{"injectables/PrismaService.html":{}}}],["encargado",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}}}],["encuentra",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["endpoint",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["endpoints",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{}}}],["endpoitn",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entidad",{"_index":560,"title":{},"body":{"classes/UserEntity.html":{}}}],["entre",{"_index":532,"title":{},"body":{"guards/RoleGuard.html":{}}}],["enviar",{"_index":561,"title":{},"body":{"classes/UserEntity.html":{}}}],["error",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["est",{"_index":531,"title":{},"body":{"guards/RoleGuard.html":{}}}],["esta",{"_index":543,"title":{},"body":{"guards/RoleGuard.html":{}}}],["establece",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["estrategia",{"_index":432,"title":{},"body":{"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["exception",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getresponse",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":18,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["exceptions.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:14",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:17",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exclude",{"_index":583,"title":{},"body":{"classes/UserEntity.html":{}}}],["executioncontext",{"_index":527,"title":{},"body":{"guards/RoleGuard.html":{}}}],["exigido",{"_index":540,"title":{},"body":{"guards/RoleGuard.html":{}}}],["exigidos",{"_index":534,"title":{},"body":{"guards/RoleGuard.html":{}}}],["existe",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["expiresin",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":434,"title":{},"body":{"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{}}}],["extractjwt",{"_index":452,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":457,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["extrae",{"_index":471,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"guards/RoleGuard.html":{}}}],["false",{"_index":459,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filtro",{"_index":9,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["findall",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(@request",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(req",{"_index":604,"title":{},"body":{"controllers/UsersController.html":{}}}],["finduserbyemail",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyemail(email",{"_index":645,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":371,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{}}}],["forbiddenexception",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('access",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["found",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":720,"title":{},"body":{"index.html":{}}}],["funcion",{"_index":450,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["funciones",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["function",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":714,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["genera",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{}}}],["generados",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('logout",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('profile",{"_index":605,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('refresh",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":716,"title":{"index.html":{}},"body":{}}],["gettokens",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(user",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["global",{"_index":496,"title":{},"body":{"modules/PrismaModule.html":{}}}],["grow",{"_index":751,"title":{},"body":{"index.html":{}}}],["guard",{"_index":158,"title":{"guards/RoleGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["guarda",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["guardar",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["guards",{"_index":518,"title":{},"body":{"guards/RoleGuard.html":{}}}],["guards/jwt",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["hace",{"_index":607,"title":{},"body":{"controllers/UsersController.html":{}}}],["hash",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashService.html":{}}}],["hashdata",{"_index":407,"title":{},"body":{"injectables/HashService.html":{}}}],["hashdata(data",{"_index":409,"title":{},"body":{"injectables/HashService.html":{}}}],["hasheada",{"_index":415,"title":{},"body":{"injectables/HashService.html":{}}}],["hashear",{"_index":414,"title":{},"body":{"injectables/HashService.html":{}}}],["hashedpassword",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedrefreshtoken",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashing",{"_index":403,"title":{},"body":{"injectables/HashService.html":{}}}],["hashservice",{"_index":222,"title":{"injectables/HashService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"coverage.html":{},"overview.html":{}}}],["hay",{"_index":539,"title":{},"body":{"guards/RoleGuard.html":{}}}],["hello",{"_index":135,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"index.html":{}}}],["hereda",{"_index":441,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UserEntity.html":{}}}],["host",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter.getrequestmethod(ctx.getrequest",{"_index":77,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter.getrequesturl(ctx.getrequest",{"_index":76,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter.reply(ctx.getresponse",{"_index":78,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapterhost",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpexception",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["https://nestjs.com",{"_index":768,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["id",{"_index":566,"title":{},"body":{"classes/UserEntity.html":{}}}],["identifier",{"_index":668,"title":{},"body":{"coverage.html":{}}}],["if(!deleteduser",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["if(!roles",{"_index":542,"title":{},"body":{"guards/RoleGuard.html":{}}}],["if(!user",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":458,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["implementa",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{}}}],["implementacion",{"_index":449,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["implements",{"_index":17,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UserEntity.html":{}}}],["import",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["imprevisto",{"_index":508,"title":{},"body":{"injectables/PrismaService.html":{}}}],["incluido",{"_index":544,"title":{},"body":{"guards/RoleGuard.html":{}}}],["index",{"_index":19,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":505,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inicializarse",{"_index":513,"title":{},"body":{"injectables/PrismaService.html":{}}}],["iniciar",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["inicio",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["injectable",{"_index":131,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":132,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["insertamos",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["installation",{"_index":730,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":732,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["instancia",{"_index":499,"title":{},"body":{"injectables/PrismaService.html":{}}}],["intenta",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["internal",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["invoca",{"_index":445,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["isemail",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["ismatch",{"_index":408,"title":{},"body":{"injectables/HashService.html":{}}}],["ismatch(data",{"_index":416,"title":{},"body":{"injectables/HashService.html":{}}}],["isnotempty",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isemail",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@minlength(2",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstrongpassword({minlength",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@minlength(9)@maxlength(15",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":557,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring",{"_index":555,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring()@minlength(2",{"_index":550,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@minlength(9)@maxlength(15",{"_index":553,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstrongpassword",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":758,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":429,"title":{},"body":{"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"dependencies.html":{}}}],["jwtaccessguard",{"_index":167,"title":{"injectables/JwtAccessGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtaccessstrategy",{"_index":223,"title":{"injectables/JwtAccessStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtfromrequest",{"_index":456,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["jwtmodule",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtrefreshguard",{"_index":173,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["jwtrefreshstrategy",{"_index":224,"title":{"injectables/JwtRefreshStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["kamil",{"_index":765,"title":{},"body":{"index.html":{}}}],["la",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["las",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/PrismaService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["lastname",{"_index":372,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{}}}],["le",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["legend",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["libreria",{"_index":439,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["librería",{"_index":405,"title":{},"body":{"injectables/HashService.html":{}}}],["license",{"_index":771,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":748,"title":{},"body":{"index.html":{}}}],["listado",{"_index":535,"title":{},"body":{"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["local",{"_index":480,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":159,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localguard",{"_index":479,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["localstrategy",{"_index":225,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalAuthGuard.html":{}}}],["login(@request",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@request",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(email",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout(req",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["los",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["manejar",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["matching",{"_index":80,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maxlength(15",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maxlength(16",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["metadata",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["methods",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(2",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(9",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlowercase",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minnumbers",{"_index":386,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minsymbols",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minuppercase",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":713,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":747,"title":{},"body":{"index.html":{}}}],["mobile",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{}}}],["mode",{"_index":737,"title":{},"body":{"index.html":{}}}],["modelo",{"_index":564,"title":{},"body":{"classes/UserEntity.html":{}}}],["models/user.entity",{"_index":625,"title":{},"body":{"controllers/UsersController.html":{}}}],["module",{"_index":93,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":95,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modulo",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["more",{"_index":761,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":766,"title":{},"body":{"index.html":{}}}],["name",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["necesarios",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["negamos",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["nest",{"_index":726,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":770,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":73,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["node.js",{"_index":719,"title":{},"body":{"index.html":{}}}],["npm",{"_index":731,"title":{},"body":{"index.html":{}}}],["nuevo",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["nuevos",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["null",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":579,"title":{},"body":{"classes/UserEntity.html":{}}}],["o",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["object",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object.assign(this",{"_index":589,"title":{},"body":{"classes/UserEntity.html":{}}}],["obtener",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{}}}],["onmoduleinit",{"_index":503,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":749,"title":{},"body":{"index.html":{}}}],["optional",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["orm",{"_index":495,"title":{},"body":{"modules/PrismaModule.html":{},"injectables/PrismaService.html":{}}}],["out",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":775,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":694,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parcial",{"_index":573,"title":{},"body":{"classes/UserEntity.html":{}}}],["partial",{"_index":569,"title":{},"body":{"classes/UserEntity.html":{}}}],["passport",{"_index":440,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":442,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":454,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":469,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["password",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UserEntity.html":{}}}],["patch",{"_index":619,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile",{"_index":615,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":75,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["payload",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["petición",{"_index":608,"title":{},"body":{"controllers/UsersController.html":{}}}],["please",{"_index":759,"title":{},"body":{"index.html":{}}}],["por",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["prisma",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["prisma.service",{"_index":497,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":500,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":106,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":252,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.jwt_access_secret",{"_index":461,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["process.env.jwt_refresh_secret",{"_index":468,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["production",{"_index":739,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":718,"title":{},"body":{"index.html":{}}}],["project",{"_index":750,"title":{},"body":{"index.html":{}}}],["promise",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":370,"title":{"properties.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"properties.html":{}}}],["protegido",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["protegidos",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["provide",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["que",{"_index":10,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["raiz",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["read",{"_index":760,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{}}}],["realiza",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/PrismaService.html":{}}}],["recibido",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["reflect",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":524,"title":{},"body":{"guards/RoleGuard.html":{}}}],["refresh",{"_index":463,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["refresh.guard",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh.guard.ts",{"_index":462,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh.strategy",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{}}}],["refresh.strategy.ts",{"_index":464,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["refresh.strategy.ts:12",{"_index":465,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refresh.strategy.ts:32",{"_index":467,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refreshtoken",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{}}}],["refreshtokenmatches",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokens(@request",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(email",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens(req",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["registrado",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["registro/creacion",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["remove",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(email",{"_index":649,"title":{},"body":{"injectables/UsersService.html":{}}}],["remove(req",{"_index":609,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":729,"title":{},"body":{"index.html":{}}}],["req",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshStrategy.html":{},"controllers/UsersController.html":{}}}],["req.get('authorization').replace('bearer",{"_index":472,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["req.user.refreshtoken",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["request.user",{"_index":546,"title":{},"body":{"guards/RoleGuard.html":{}}}],["reset",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["response",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsebody",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["respuesta",{"_index":562,"title":{},"body":{"classes/UserEntity.html":{}}}],["results",{"_index":79,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retorna",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rol",{"_index":520,"title":{},"body":{"guards/RoleGuard.html":{}}}],["role",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["roleguard",{"_index":517,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["roles",{"_index":533,"title":{},"body":{"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":628,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles.includes(user.role",{"_index":547,"title":{},"body":{"guards/RoleGuard.html":{}}}],["run",{"_index":734,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":421,"title":{},"body":{"injectables/HashService.html":{}}}],["scalable",{"_index":723,"title":{},"body":{"index.html":{}}}],["se",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{}}}],["sean",{"_index":476,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["secret",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":460,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["server",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"index.html":{}}}],["services/hash.service",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["servicio",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{}}}],["sesion",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["sesión",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["setmetadata('roles",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["si",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HashService.html":{},"guards/RoleGuard.html":{}}}],["side",{"_index":724,"title":{},"body":{"index.html":{}}}],["signup",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["signup(@body",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(dto",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sin",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["sino",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["situations",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["son",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":753,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":715,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":133,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":134,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:22",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:45",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:57",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:130",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:14",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:144",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:28",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:48",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:67",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:82",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:92",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator",{"_index":623,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":676,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/create",{"_index":368,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":425,"title":{},"body":{"injectables/JwtAccessGuard.html":{},"injectables/JwtRefreshGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":474,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/role.guard",{"_index":624,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/guards/role.guard.ts",{"_index":519,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/auth/guards/role.guard.ts:16",{"_index":528,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guards/role.guard.ts:8",{"_index":525,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/services/hash.service.ts",{"_index":402,"title":{},"body":{"injectables/HashService.html":{},"coverage.html":{}}}],["src/auth/services/hash.service.ts:15",{"_index":410,"title":{},"body":{"injectables/HashService.html":{}}}],["src/auth/services/hash.service.ts:26",{"_index":417,"title":{},"body":{"injectables/HashService.html":{}}}],["src/auth/strategies/jwt",{"_index":436,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":478,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:12",{"_index":482,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:29",{"_index":485,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/common/filters/all",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":684,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module.ts",{"_index":493,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":498,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:13",{"_index":511,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:21",{"_index":506,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/users/dto/update",{"_index":549,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/models/user.entity.ts",{"_index":559,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/users/models/user.entity.ts:18",{"_index":580,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:19",{"_index":586,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:20",{"_index":578,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:21",{"_index":581,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:22",{"_index":577,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:23",{"_index":582,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:26",{"_index":585,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:29",{"_index":584,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:31",{"_index":576,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:32",{"_index":587,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:9",{"_index":570,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.controller.ts",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:27",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:38",{"_index":606,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":616,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":611,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":639,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/users.service.ts",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:10",{"_index":643,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:17",{"_index":644,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:27",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:45",{"_index":653,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:60",{"_index":650,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":735,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":738,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":740,"title":{},"body":{"index.html":{}}}],["started",{"_index":717,"title":{"index.html":{}},"body":{}}],["starter",{"_index":728,"title":{},"body":{"index.html":{}}}],["statements",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":71,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["stay",{"_index":762,"title":{},"body":{"index.html":{}}}],["strategies/jwt",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":453,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":455,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":754,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":773,"title":{},"body":{"modules.html":{}}}],["table",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["tendrán",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":743,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":746,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":745,"title":{},"body":{"index.html":{}}}],["tests",{"_index":742,"title":{},"body":{"index.html":{}}}],["texto",{"_index":413,"title":{},"body":{"injectables/HashService.html":{}}}],["thanks",{"_index":752,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":514,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":515,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(req.user",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(req.user.email",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens(req.user.email",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(dto",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":489,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashservice.hashdata(dto.password",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashservice.hashdata(refreshtoken",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashservice.ismatch(password",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashservice.ismatch(refreshtoken",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.httpadapterhost",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.jwtservice.signasync",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.create",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.delete",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findmany",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":658,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.get('roles",{"_index":537,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.updaterefreshtoken(email",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterefreshtoken(user.email",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findall",{"_index":629,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyemail(email",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.finduserbyemail(req.user.email",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(req.user.id",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(email",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.update(req.user.email",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["thus",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["tiene",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshGuard.html":{},"guards/RoleGuard.html":{}}}],["timestamp",{"_index":72,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["todas",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["todos",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":446,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["tokens",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokens.refreshtoken",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":763,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["transformer",{"_index":588,"title":{},"body":{"classes/UserEntity.html":{},"dependencies.html":{}}}],["trim",{"_index":473,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["true",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/HashService.html":{},"injectables/JwtRefreshStrategy.html":{},"guards/RoleGuard.html":{}}}],["twitter",{"_index":769,"title":{},"body":{"index.html":{}}}],["type",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typescript",{"_index":727,"title":{},"body":{"index.html":{}}}],["un",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/HashService.html":{},"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["una",{"_index":411,"title":{},"body":{"injectables/HashService.html":{},"classes/UserEntity.html":{}}}],["unauthorizedexception",{"_index":487,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unit",{"_index":741,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":781,"title":{},"body":{"properties.html":{}}}],["update",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(dto",{"_index":614,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(email",{"_index":652,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedat",{"_index":567,"title":{},"body":{"classes/UserEntity.html":{}}}],["updateduser",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["updaterefreshtoken",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterefreshtoken(email",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto",{"_index":548,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usa",{"_index":431,"title":{},"body":{"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{}}}],["useclass",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtaccessguard",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtaccessguard)@get('logout",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtrefreshguard",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(roleguard",{"_index":627,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(roleguard)@roles(role.admin)@get",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":369,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:14",{"_index":551,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:18",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":552,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:22",{"_index":375,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":554,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":556,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:35",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":558,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.refreshtoken",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity",{"_index":196,"title":{"classes/UserEntity.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userentity(await",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["userentity(user",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{}}}],["username",{"_index":483,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernamefield",{"_index":488,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":640,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map((user",{"_index":630,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.service",{"_index":621,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/models/user.entity",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["users/users.module",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":590,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":107,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":253,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usuario",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["usuarios",{"_index":603,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["utiliza",{"_index":404,"title":{},"body":{"injectables/HashService.html":{}}}],["valida",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["validado",{"_index":451,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validar",{"_index":486,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate",{"_index":443,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(@request",{"_index":470,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["validate(email",{"_index":484,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":447,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["validate(req",{"_index":466,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["validateuser",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":677,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":782,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifica",{"_index":427,"title":{},"body":{"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/LocalAuthGuard.html":{},"guards/RoleGuard.html":{}}}],["version",{"_index":779,"title":{},"body":{"properties.html":{}}}],["void",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{}}}],["válidas",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalAuthGuard.html":{}}}],["válido",{"_index":430,"title":{},"body":{"injectables/JwtAccessGuard.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"guards/RoleGuard.html":{}}}],["watch",{"_index":736,"title":{},"body":{"index.html":{}}}],["website",{"_index":767,"title":{},"body":{"index.html":{}}}],["world",{"_index":136,"title":{},"body":{"injectables/AppService.html":{}}}],["y",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/PrismaService.html":{},"guards/RoleGuard.html":{}}}],["you'd",{"_index":757,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/all-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Filtro que captura todas la exceptions sin manejar\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/all-exceptions.filter.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/all-exceptions.filter.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ExceptionFilter,\n    Catch,\n    ArgumentsHost,\n    HttpException,\n    HttpStatus,\n  } from '@nestjs/common';\n  import { HttpAdapterHost } from '@nestjs/core';\n  \n  /**\n   * Filtro que captura todas la exceptions sin manejar\n   */\n  @Catch()\n  export class AllExceptionsFilter implements ExceptionFilter {\n    constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n  \n    catch(exception: unknown, host: ArgumentsHost): void {\n      // In certain situations `httpAdapter` might not be available in the\n      // constructor method, thus we should resolve it here.\n      const { httpAdapter } = this.httpAdapterHost;\n  \n      const ctx = host.switchToHttp();\n      \n      const httpStatus =\n        exception instanceof HttpException\n          ? exception.getStatus()\n          : HttpStatus.INTERNAL_SERVER_ERROR;\n\n      const message = \n        exception instanceof HttpException\n          ? exception.message\n          : \"Internal Server Error\";\n\n      const response =\n        exception instanceof HttpException\n          ? exception.getResponse()\n          : {};\n\n      const responseBody = {\n        statusCode: httpStatus,\n        message: message,\n        response: response,\n        timestamp: new Date().toISOString(),\n        path: httpAdapter.getRequestUrl(ctx.getRequest()),\n        method: httpAdapter.getRequestMethod(ctx.getRequest()),\n      };\n  \n      httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n    }\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Modulo raiz de la app\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { APP_FILTER } from '@nestjs/core';\nimport { AllExceptionsFilter } from './common/filters/all-exceptions.filter';\n\n/**\n * Modulo raiz de la app\n */\n@Module({\n  imports: [ \n    ConfigModule.forRoot({\n      isGlobal: true,\n    }), PrismaModule, AuthModule, UsersModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_FILTER,\n      useClass: AllExceptionsFilter,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controlador del modulo AuthModule\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                logout\n                            \n                            \n                                    \n                                    \n                                refreshTokens\n                            \n                            \n                                    \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n                    Endpoint para inicio de sesion de usuario\nProtegido por @Guard LocalAuthGuard\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAccessGuard)@Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n                    Endpoint para cierre se sesión\nProtegido por @Guard JwtAccessGuard\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:57\n                \n            \n\n\n            \n                \n                    Endpoint para actualización de tokens\nProtegido por @Guard JwtRefreshGuard\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(dto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:22\n                \n            \n\n\n            \n                \n                    Endpoint para registro/creacion de usuario\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nData transfer object para la creación de un usuario\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \nUsuario creado\n\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Request, UseGuards } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { AuthService } from './auth.service';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { UserEntity } from '../users/models/user.entity';\nimport { JwtAccessGuard } from './guards/jwt-access.guard';\nimport { JwtRefreshGuard } from './guards/jwt-refresh.guard';\n\n/**\n * Controlador del modulo AuthModule\n */\n@Controller('auth')\nexport class AuthController {\n    constructor(private authService: AuthService){}\n\n    /**\n     * Endpoint para registro/creacion de usuario\n     * @param {CreateUserDto} dto - Data transfer object para la creación de un usuario \n     * @returns {UserEntity} - Usuario creado\n     */\n    @Post('signup')\n    async signup(@Body() dto: CreateUserDto){\n        return new UserEntity(await this.authService.signup(dto));\n    }\n\n    /**\n     * Endpoint para cierre se sesión\n     * Protegido por @Guard JwtAccessGuard\n     * @param req\n     */\n    @UseGuards(JwtAccessGuard)\n    @Get('logout')\n    logout(@Request() req) {\n        this.authService.logout(req.user.email);\n    }\n\n    /**\n     * Endpoint para inicio de sesion de usuario\n     * Protegido por @Guard LocalAuthGuard\n     * @param req \n     * @returns \n     */\n    @UseGuards(LocalAuthGuard)\n    @Post('login')\n    login(@Request() req) {\n        return this.authService.login(req.user);\n    }\n\n    /**\n     * Endpoint para actualización de tokens\n     * Protegido por @Guard JwtRefreshGuard\n     * @param req \n     * @returns \n     */\n    @UseGuards(JwtRefreshGuard)\n    @Get('refresh')\n    refreshTokens(@Request() req) {\n        return this.authService.refreshTokens(req.user.email, req.user.refreshToken);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nHashService\n\nHashService\n\nAuthModule -->\n\nHashService->AuthModule\n\n\n\n\n\nJwtAccessStrategy\n\nJwtAccessStrategy\n\nAuthModule -->\n\nJwtAccessStrategy->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Modulo encargado de las funciones de Autenticación y Autorización\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashService\n                        \n                        \n                            JwtAccessStrategy\n                        \n                        \n                            JwtRefreshStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { HashService } from './services/hash.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtAccessStrategy } from './strategies/jwt-access.strategy';\nimport { JwtRefreshStrategy } from './strategies/jwt-refresh.strategy';\n\n/**\n * Modulo encargado de las funciones de Autenticación y Autorización\n */\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n    })\n  ],\n  providers: [AuthService, HashService, LocalStrategy, JwtAccessStrategy, JwtRefreshStrategy],\n  controllers: [AuthController]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Servicio que implementa las funciones de autorización y autenticación\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                updateRefreshToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, hashService: HashService, usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashService\n                                                  \n                                                        \n                                                                        HashService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:92\n                \n            \n\n\n            \n                \n                    Genera el accessToken y refreshToken para un usuario\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUsuario al que se le crearan los tokens\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \nTokens para el usuario\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:67\n                \n            \n\n\n            \n                \n                    Realiza el login de un usuario autenticado\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUsuario autenticado\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \naccessToken y refreshToken del usuario\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:82\n                \n            \n\n\n            \n                \n                    Realiza el logout de un usuario autenticado\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nemail del usuario\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \nUsuario con refreshToken null\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(email: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:144\n                \n            \n\n\n            \n                \n                    Genera nuevos tokens para un usuario dado un refreshToken\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nemail del usuario\n\n\n                                    \n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nrefreshToken del usuario\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \nTokens nuevos para el usuario\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(dto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:28\n                \n            \n\n\n            \n                \n                    Crea un usuario en la base de datos\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nData transfer object del usuario a crear\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nUsuario en la base de datos\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRefreshToken(email: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:130\n                \n            \n\n\n            \n                \n                    Actualiza el refreshToken de un usuario en la base de datos\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:48\n                \n            \n\n\n            \n                \n                    Valida las credenciales de inicio de sesión de un usuario\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCredencial email del usuario que intenta iniciar sesión\n\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCredencial password del usuario que intenta iniciar sesión\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nUsuario si las credenciales son válidas, sino null\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { HashService } from './services/hash.service';\nimport { UsersService } from 'src/users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from '@prisma/client';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Servicio que implementa las funciones de autorización y autenticación\n */\n@Injectable()\nexport class AuthService {\n    constructor(\n        private prisma: PrismaService,\n        private hashService: HashService,\n        private usersService: UsersService,\n        private jwtService: JwtService,\n        private configService: ConfigService,\n    ){}\n\n    /**\n     * Crea un usuario en la base de datos\n     * @param {CreateUserDto} dto - Data transfer object del usuario a crear\n     * @returns {User} - Usuario en la base de datos\n     */\n    async signup(dto: CreateUserDto): Promise {\n        // Se realiza el hash del password recibido en el dto antes de crear el usuario en la base de datos\n        const hashedPassword = await this.hashService.hashData(dto.password);\n\n        // Insertamos usuario en la base de datos\n        const user = await this.prisma.user.create({\n            data: {\n                ...dto,\n                password: hashedPassword,\n            }\n        })\n        return user;\n    }\n\n    /**\n     * Valida las credenciales de inicio de sesión de un usuario\n     * @param {string} email - Credencial email del usuario que intenta iniciar sesión\n     * @param {string} password - Credencial password del usuario que intenta iniciar sesión\n     * @returns {User | null} - Usuario si las credenciales son válidas, sino null\n     */\n    async validateUser(email: string, password: string): Promise {\n\n        // Buscamos en la base de datos el usuario registrado con el email\n        const user = await this.usersService.findUserByEmail(email);\n\n        // Si existe el usuario comparamos el password recibido con el password de la base de datos\n        if (user && await this.hashService.isMatch(password, user.password)) {\n            return user;\n        }\n\n        // Retorna null si las credenciales no son válidas\n        return null;\n    }\n\n    /**\n     * Realiza el login de un usuario autenticado\n     * @param user - Usuario autenticado\n     * @returns - accessToken y refreshToken del usuario\n     */\n    async login(user: any) {\n        // Genera los tokens para el usuario autenticado\n        const tokens = await this.getTokens(user);\n\n        // Actualiza en la base de datos el refreshToken del usuario autenticado\n        await this.updateRefreshToken(user.email, tokens.refreshToken);\n        \n        return tokens;\n    }\n\n    /**\n     * Realiza el logout de un usuario autenticado\n     * @param {string} email - email del usuario \n     * @returns - Usuario con refreshToken null\n     */\n    async logout(email: string) {\n        // Establece como null el refreshToken del usuario en la base de datos\n        return this.usersService.update(email, { refreshToken: null });\n    }\n\n    /**\n     * Genera el accessToken y refreshToken para un usuario\n     * @param user - Usuario al que se le crearan los tokens\n     * @returns - Tokens para el usuario\n     */\n    async getTokens(user: any) {\n\n        // Establece el payload que tendrán los tokens generados\n        const payload = {\n            sub: user.id,\n            email: user.email,\n            role: user.role,\n        }\n\n        // Genera los tokens con el servicio jwtService\n        const [accessToken, refreshToken] = await Promise.all([\n            this.jwtService.signAsync(\n                payload,\n                {\n                    secret: this.configService.get('JWT_ACCESS_SECRET'),\n                    expiresIn: '15m',\n                },\n            ),\n            this.jwtService.signAsync(\n                payload,\n                {\n                    secret: this.configService.get('JWT_REFRESH_SECRET'),\n                    expiresIn: '7d',\n                },\n            ),\n        ]);\n\n        return {\n            accessToken,\n            refreshToken,\n        }\n    }\n\n    /**\n     * Actualiza el refreshToken de un usuario en la base de datos\n     * @param {string} email \n     * @param {string} refreshToken \n     */\n    async updateRefreshToken(email: string, refreshToken: string) {\n        // Hash del refreshToken para guardar en la base de datos\n        const hashedRefreshToken = await this.hashService.hashData(refreshToken);\n        \n        // Se guarda el hash del refreshToken en la base de datos\n        await this.usersService.update(email, { refreshToken: hashedRefreshToken});\n    }\n\n    /**\n     * Genera nuevos tokens para un usuario dado un refreshToken\n     * @param {string} email - email del usuario\n     * @param {string} refreshToken - refreshToken del usuario\n     * @returns - Tokens nuevos para el usuario\n     */\n    async refreshTokens(email: string, refreshToken: string) {\n        // Busca al usuario en la base de datos\n        const user = await this.usersService.findUserByEmail(email);\n        \n        // Si no encuentra al usuario o el usuario no tiene refreshToken negamos el acceso\n        if(!user || !user.refreshToken) {\n            throw new ForbiddenException('Access Denied');\n        }\n\n        // Comprueba que el refreshToken recibido coincide con el refreshToken en la base de datos\n        const refreshTokenMatches = await this.hashService.isMatch(refreshToken, user.refreshToken);\n        if (!refreshTokenMatches) {\n            throw new ForbiddenException('Access Denied');\n        }\n\n        // Genera nuevos tokens para el usuario\n        const tokens = await this.getTokens(user);\n\n        // Actualiza el nuevo refreshToken en la base de datos\n        await this.updateRefreshToken(email, tokens.refreshToken);\n        \n        return tokens;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para creación (signup) de un usuario\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                mobile\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        mobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(9)@MaxLength(15)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsStrongPassword({minLength: 8, minLowercase: 1, minUppercase: 1, minNumbers: 1, minSymbols: 1})@MaxLength(16)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from \"@prisma/client\";\nimport { IsEmail, IsNotEmpty, IsString, IsStrongPassword, MaxLength, MinLength } from \"class-validator\";\n\n/**\n * Data Transfer Object para creación (signup) de un usuario\n */\nexport class CreateUserDto {\n    role: Role;\n\n    @IsNotEmpty()\n    @IsString()\n    @MinLength(2)\n    firstName: string;\n\n    @IsNotEmpty()\n    @IsString()\n    @MinLength(2)\n    lastName: string;\n\n    @IsNotEmpty()\n    @IsEmail()\n    email: string;\n\n    @IsNotEmpty()\n    @IsStrongPassword(\n        {\n            minLength: 8,\n            minLowercase: 1,\n            minUppercase: 1,\n            minNumbers: 1,\n            minSymbols: 1\n        }\n    )\n    @MaxLength(16)\n    password: string;\n\n    @IsNotEmpty()\n    @MinLength(9)\n    @MaxLength(15)\n    mobile: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashService.html":{"url":"injectables/HashService.html","title":"injectable - HashService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/services/hash.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Servicio para el hashing de data. Utiliza la librería bcrypt\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                hashData\n                            \n                            \n                                    Async\n                                isMatch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hashData\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashData(data: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/services/hash.service.ts:15\n                \n            \n\n\n            \n                \n                    Realiza el hashing de una cadena de texto\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCadena de texto a hashear\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nCadena de texto hasheada\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        isMatch\n                        \n                    \n                \n            \n            \n                \n                    \n                    isMatch(data: string, hash: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/services/hash.service.ts:26\n                \n            \n\n\n            \n                \n                    Comprueba si una cadena de texto se corresponde con un hash\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCadena de texto a comparar\n\n\n                                    \n                                \n                                \n                                    hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nHash al que comparar cadena de texto\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \ntrue si la cadena de texto y el hash se corresponden\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\n\n/**\n * Servicio para el hashing de data. Utiliza la librería bcrypt\n */\n@Injectable()\nexport class HashService {\n\n    /**\n     * Realiza el hashing de una cadena de texto\n     * @param {string} data - Cadena de texto a hashear\n     * @returns {string} - Cadena de texto hasheada\n     */\n    async hashData(data: string): Promise {\n        const salt = await bcrypt.genSalt();\n        return bcrypt.hash(data, salt);\n    }\n\n    /**\n     * Comprueba si una cadena de texto se corresponde con un hash\n     * @param {string} data - Cadena de texto a comparar\n     * @param {string} hash - Hash al que comparar cadena de texto\n     * @returns {string} - true si la cadena de texto y el hash se corresponden\n     */\n    async isMatch(data: string, hash: string): Promise {\n        return bcrypt.compare(data, hash)\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAccessGuard.html":{"url":"injectables/JwtAccessGuard.html","title":"injectable - JwtAccessGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAccessGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-access.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard que verifica que el request contenga un Jwt de acceso válido\nUsa la estrategia JwtAccessStrategy\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n/**\n * Guard que verifica que el request contenga un Jwt de acceso válido\n * Usa la estrategia JwtAccessStrategy\n */\n@Injectable()\nexport class JwtAccessGuard extends AuthGuard('jwt') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAccessStrategy.html":{"url":"injectables/JwtAccessStrategy.html","title":"injectable - JwtAccessStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAccessStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-access.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Estrategia que ejecuta el Guard JwtAccessGuard\nUsa la libreria passport-jwt\nHereda de PassportStrategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-access.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor que invoca al Constructor de PassportStrategy\nVerifica que existe un token válido en el request\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt-access.strategy.ts:29\n                \n            \n\n\n            \n                \n                    Implementacion de la funcion validate de la estrategia\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPayload del token validado\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \nPayload del token validado\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\n\n/**\n * Estrategia que ejecuta el Guard JwtAccessGuard\n * Usa la libreria passport-jwt\n * Hereda de PassportStrategy\n */\n@Injectable()\nexport class JwtAccessStrategy extends PassportStrategy(Strategy, 'jwt') {\n    /**\n     * Constructor que invoca al Constructor de PassportStrategy\n     * Verifica que existe un token válido en el request\n     */\n    constructor() {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: process.env.JWT_ACCESS_SECRET,\n        })\n    }\n\n    /**\n     * Implementacion de la funcion validate de la estrategia\n     * @param payload - Payload del token validado\n     * @returns - Payload del token validado\n     */\n    async validate(payload: any) {\n        return payload;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-refresh.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard que verifica que el request tiene un refresh jwt válido\nUsa la estrategia JwtRefreshStrategy\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n/**\n * Guard que verifica que el request tiene un refresh jwt válido\n * Usa la estrategia JwtRefreshStrategy\n */\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshStrategy.html":{"url":"injectables/JwtRefreshStrategy.html","title":"injectable - JwtRefreshStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-refresh.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Estrategia que ejecuta el Guard JwtRefreshGuard\nUsa la libreria passport-jwt\nHereda de PassportStrategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-refresh.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor que invoca al Constructor de PassportStrategy\nVerifica que existe un token válido en el request\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt-refresh.strategy.ts:32\n                \n            \n\n\n            \n                \n                    Implementacion de la funcion validate de la estrategia\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nRequest\n\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPayload del token validado\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \nPayload del token validado y el refreshToken\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Request } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\n\n\n/**\n * Estrategia que ejecuta el Guard JwtRefreshGuard\n * Usa la libreria passport-jwt\n * Hereda de PassportStrategy\n */\n@Injectable()\nexport class JwtRefreshStrategy extends PassportStrategy(Strategy, 'jwt-refresh') {\n    /**\n     * Constructor que invoca al Constructor de PassportStrategy\n     * Verifica que existe un token válido en el request\n     */\n    constructor() {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: process.env.JWT_REFRESH_SECRET,\n            passReqToCallback: true,\n        })\n    }\n\n    /**\n     * Implementacion de la funcion validate de la estrategia\n     * @param req - Request \n     * @param payload - Payload del token validado\n     * @returns - Payload del token validado y el refreshToken\n     */\n    async validate(@Request() req, payload: any) {\n        // Extrae el token del request\n        const refreshToken = req.get('Authorization').replace('Bearer', '').trim();\n        \n        return { ...payload, refreshToken};\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Guard que verifica que las credenciales de login sean válidas\nUsa la estrategia LocalStrategy\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n/**\n * Guard que verifica que las credenciales de login sean válidas\n * Usa la estrategia LocalStrategy\n */\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Estrategia que ejecuta el Guard LocalGuard\nUsa la libreria passport-local\nHereda de PassportStrategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor que invoca al Constructor de PassportStrategy\nEstablece el email como username\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:29\n                \n            \n\n\n            \n                \n                    Implementacion de la funcion validate de la estrategia\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nemail del usuario a validar\n\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \npassword del usuario a validar\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nUsuario validado\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Strategy } from \"passport-local\";\nimport { AuthService } from \"../auth.service\";\n\n/**\n * Estrategia que ejecuta el Guard LocalGuard\n * Usa la libreria passport-local\n * Hereda de PassportStrategy\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    /**\n     * Constructor que invoca al Constructor de PassportStrategy\n     * Establece el email como username\n     */\n    constructor(private authService: AuthService) {\n        super({\n            usernameField: 'email'\n        })\n    }\n\n    /**\n     * Implementacion de la funcion validate de la estrategia\n     * @param {string} email - email del usuario a validar\n     * @param {string} password - password del usuario a validar\n     * @returns - Usuario validado\n     */\n    async validate(email: string, password: string): Promise {\n        const user = await this.authService.validateUser(email, password);\n        if(!user) {\n            throw new UnauthorizedException();\n        }\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Modulo encargado de la conexion a la base de datos\nUsa el ORM Prisma\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n/**\n * Modulo encargado de la conexion a la base de datos\n * Usa el ORM Prisma\n */\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Servicio que implementa las funciones de conexion a la base de datos con el ORM Prisma\nInstancia PrismaClient del ORM y realiza la conexión\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:21\n                \n            \n\n\n            \n                \n                    En caso de un cierre imprevisto de la aplicación realiza la desconexión a la base de datos\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nInstancia de la aplicación\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:13\n                \n            \n\n\n            \n                \n                    Conecta a la base de datos al inicializarse PrismaModule\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n/**\n * Servicio que implementa las funciones de conexion a la base de datos con el ORM Prisma\n * Instancia PrismaClient del ORM y realiza la conexión\n */\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit{\n    /**\n     * Conecta a la base de datos al inicializarse PrismaModule\n     */\n    async onModuleInit() {\n        await this.$connect();\n    }\n\n    /**\n     * En caso de un cierre imprevisto de la aplicación realiza la desconexión a la base de datos\n     * @param app - Instancia de la aplicación\n     */\n    async enableShutdownHooks(app: INestApplication) {\n        this.$on('beforeExit', async () => {\n            await app.close();\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/role.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard que verifica que el usuario tiene un rol válido para acceder al endpoint\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/role.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/role.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true si el rol del usuario está entre los roles exigidos\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\n\n/**\n * Guard que verifica que el usuario tiene un rol válido para acceder al endpoint\n */\n@Injectable()\nexport class RoleGuard implements CanActivate {\n    constructor(private reflector: Reflector) {}\n\n    /**\n     * \n     * @param {ExecutionContext} context\n     * @returns {boolean} true si el rol del usuario está entre los roles exigidos\n     */\n    canActivate(context: ExecutionContext): boolean {\n        \n        // Extrae el listado roles exigidos en el decorador @Role del endpoint\n        const roles = this.reflector.get('roles', context.getHandler());\n        \n        // Si no hay rol exigido el Guard da acceso\n        if(!roles) {\n            return true;\n        }\n\n        // Extrae el rol del request y si esta incluido en el listado de roles exigidos el Guard da acceso\n        const request = context.switchToHttp().getRequest();\n        const user = request.user;\n        return roles.includes(user.role);\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para la actualización de datos de un usuario\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                mobile\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                refreshToken\n                            \n                            \n                                    \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MinLength(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MinLength(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        mobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@MinLength(9)@MaxLength(15)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from \"@prisma/client\";\nimport { IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\n\n/**\n * Data Transfer Object para la actualización de datos de un usuario\n */\nexport class UpdateUserDto {\n    @IsOptional()\n    role?: Role;\n\n    @IsOptional()\n    @IsString()\n    @MinLength(2)\n    firstName?: string;\n\n    @IsOptional()\n    @IsString()\n    @MinLength(2)\n    lastName?: string;\n\n    @IsOptional()\n    @MinLength(9)\n    @MaxLength(15)\n    mobile?: string;\n\n    @IsOptional()\n    @IsString()\n    refreshToken?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad usuario para enviar como respuesta al cliente\nHereda del modelo User de Prisma\n\n            \n\n\n            \n                Implements\n            \n            \n                        User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                lastName\n                            \n                            \n                                mobile\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                refreshToken\n                            \n                            \n                                role\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/users/models/user.entity.ts:9\n                            \n                        \n\n                \n                    \n                            Genera una entidad de la clase con cualquier parcial de ella\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role, User } from \"@prisma/client\";\nimport { Exclude } from \"class-transformer\";\n\n\n/**\n * Entidad usuario para enviar como respuesta al cliente\n * Hereda del modelo User de Prisma\n */\nexport class UserEntity implements User {\n    /**\n     * Genera una entidad de la clase con cualquier parcial de ella\n     * @param partial - \n     */\n    constructor(partial: Partial) {\n        Object.assign(this, partial);\n    }\n\n    id: number;\n    role: Role;\n    firstName: string;\n    lastName: string;\n    email: string;\n    mobile: string;\n\n    @Exclude()\n    refreshToken: string;\n\n    @Exclude()\n    password: string;\n\n    createdAt: Date;\n    updatedAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controlador del modulo UsersModule\nEndpoints protegidos por el @Guard JwtAccessGuard\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RoleGuard)@Roles(Role.ADMIN)@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:27\n                \n            \n\n\n            \n                \n                    Endpoint para obtener un listado de todos los usuarios\nProtegido por el @Guard RoleGuard\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \nListado de usuarios\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:38\n                \n            \n\n\n            \n                \n                    Endpoint para obtener los datos del usuario que hace la petición\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \nDatos del usuario que hace la petición\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('profile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:62\n                \n            \n\n\n            \n                \n                    Endpoint para eliminar al usuario que hace la petición\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \nDatos del usuario eliminado\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dto: UpdateUserDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:49\n                \n            \n\n\n            \n                \n                    Endpoint para editar los datos del usuario que hace la petición\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nData transfer object con los datos a editar\n\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \nDatos actualizados del usuario que hace la petición\n\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Request, Patch, UseGuards, Delete } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { JwtAccessGuard } from 'src/auth/guards/jwt-access.guard';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { Role } from '@prisma/client';\nimport { RoleGuard } from 'src/auth/guards/role.guard';\nimport { UserEntity } from './models/user.entity';\n\n/**\n * Controlador del modulo UsersModule\n * Endpoints protegidos por el @Guard JwtAccessGuard\n */\n@Controller('users')\n@UseGuards(JwtAccessGuard)\nexport class UsersController {\n    constructor(private usersService: UsersService) {}\n\n    /**\n     * Endpoint para obtener un listado de todos los usuarios\n     * Protegido por el @Guard RoleGuard\n     * @returns {UserEntity[]} - Listado de usuarios\n     */\n    @UseGuards(RoleGuard)\n    @Roles(Role.ADMIN)\n    @Get()\n    async findAll() {\n        const users = await this.usersService.findAll();\n        return users.map((user) => new UserEntity(user));\n    }\n\n    /**\n     * Endpoint para obtener los datos del usuario que hace la petición\n     * @param req\n     * @returns - Datos del usuario que hace la petición\n     */\n    @Get('profile')\n    async findOne(@Request() req) {\n        return new UserEntity(await this.usersService.findUserByEmail(req.user.email));\n    }\n\n    /**\n     * Endpoint para editar los datos del usuario que hace la petición\n     * @param {UpdateUserDto} dto - Data transfer object con los datos a editar\n     * @param req \n     * @returns - Datos actualizados del usuario que hace la petición\n     */\n    @Patch('profile')\n    async update(\n        @Body() dto: UpdateUserDto,\n        @Request() req\n    ) {\n        return new UserEntity(await this.usersService.update(req.user.email, dto));\n    }\n\n    /**\n     * Endpoint para eliminar al usuario que hace la petición\n     * @param req \n     * @returns - Datos del usuario eliminado\n     */\n    @Delete('profile')\n    async remove(\n        @Request() req\n    ) {\n        return new UserEntity(await this.usersService.remove(req.user.id));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Modulo encargado de las funciones de usuarios\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n/**\n * Modulo encargado de las funciones de usuarios\n */\n@Module({\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Servicio que implementa las funciones de usuario\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:17\n                \n            \n\n\n            \n                \n                    Encuentra todos los usuarios en la base de datos\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nListado de usuarios en la base de datos\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:27\n                \n            \n\n\n            \n                \n                    Encuentra en la base de datos al usuario correspondiente a un email\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nemail del usuario a buscar\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nUsuario correspondiente\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:60\n                \n            \n\n\n            \n                \n                    Elimina de la base de datos al usuario correspondiente a un email\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nemail del usuario a eliminar\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \nUsuario eliminado\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(email: string, dto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:45\n                \n            \n\n\n            \n                \n                    Actualiza en la base de datos al usuario correspondiente a un email\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nemail del usuario a actualizar\n\n\n                                    \n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nData transfer object con los datos a actualizar\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \nUsuario actualizado\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from '@prisma/client';\n\n/**\n * Servicio que implementa las funciones de usuario\n */\n@Injectable()\nexport class UsersService {\n    constructor(private prisma: PrismaService){}\n\n    /**\n     * Encuentra todos los usuarios en la base de datos\n     * @returns {User[]} - Listado de usuarios en la base de datos\n     */\n    async findAll(): Promise {\n        const users = await this.prisma.user.findMany();\n        return users;\n    }\n\n    /**\n     * Encuentra en la base de datos al usuario correspondiente a un email\n     * @param {string} email - email del usuario a buscar\n     * @returns - Usuario correspondiente\n     */\n    async findUserByEmail(email: string): Promise {\n        const user = await this.prisma.user.findUnique({\n            where: {\n                email: email,\n            }\n        });\n        if(!user) {\n            throw new BadRequestException(\"User not found\");\n        }\n        return user;\n    }\n\n    /**\n     * Actualiza en la base de datos al usuario correspondiente a un email\n     * @param {string} email - email del usuario a actualizar\n     * @param {UpdateUserDto} dto - Data transfer object con los datos a actualizar\n     * @returns - Usuario actualizado\n     */\n    async update(email: string, dto: UpdateUserDto) {\n        const updatedUser = await this.prisma.user.update({\n            data: dto,\n            where: {\n                email: email,\n            },\n        });\n        return updatedUser;\n    }\n  \n    /**\n     * Elimina de la base de datos al usuario correspondiente a un email\n     * @param {string} email - email del usuario a eliminar \n     * @returns - Usuario eliminado\n     */\n    async remove(email: string) {\n        const deletedUser = await this.prisma.user.delete({\n            where: {\n                email: email,\n            },\n        })\n        if(!deletedUser) {\n            throw new BadRequestException(\"User not found\");\n        }\n        return deletedUser;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-access.guard.ts\n            \n            injectable\n            JwtAccessGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/services/hash.service.ts\n            \n            injectable\n            HashService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-access.strategy.ts\n            \n            injectable\n            JwtAccessStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-refresh.strategy.ts\n            \n            injectable\n            JwtRefreshStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/filters/all-exceptions.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/users/models/user.entity.ts\n            \n            class\n            UserEntity\n            \n                16 %\n                (2/12)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                83 %\n                (5/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^3.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.1.0\n        \n            @nestjs/passport : ^10.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @prisma/client : ^4.16.2\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nHashService\n\nHashService\n\nAuthModule -->\n\nHashService->AuthModule\n\n\n\n\n\nJwtAccessStrategy\n\nJwtAccessStrategy\n\nAuthModule -->\n\nJwtAccessStrategy->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata('roles', roles)\n                    \n                \n\n            \n                \n                    Decorador para anotar los roles necesarios para acceder a un endpoitn\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
